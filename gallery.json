{
    "default_domino_pieces": {
        "version": "0.8.0",
        "url": "https://github.com/Tauffer-Consulting/default_domino_pieces",
        "pieces": {
            "StringOperationsPiece": {
                "name": "StringOperationsPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements_0.txt"
                },
                "tags": [
                    "default",
                    "string"
                ],
                "style": {
                    "node_label": "String Operations",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#b3cde8"
                    },
                    "useIcon": true,
                    "icon_class_name": "tabler:sort-a-z",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "A Piece that performs string operations",
                "input_schema": {
                    "$defs": {
                        "OperationItem": {
                            "properties": {
                                "operation": {
                                    "allOf": [
                                        {
                                            "$ref": "#/$defs/OperationsTypes"
                                        }
                                    ],
                                    "description": "Operation to perform. Options: `concatenate`, `lower_case`, `upper_case`, `split_by`, `replace_by`.",
                                    "from_upstream": "never"
                                },
                                "second_argument": {
                                    "default": "",
                                    "description": "Value for the second argument.",
                                    "title": "Second Argument",
                                    "type": "string"
                                },
                                "auxiliary_argument": {
                                    "default": "",
                                    "description": "Auxiliary argument for `split_by` and `replace_by` operations.\nIf `split_by` is selected, this argument will be used as the index of the split array.\nIf `replace_by` is selected, this argument will be used as the string to replace.\n",
                                    "title": "Auxiliary Argument",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "operation"
                            ],
                            "title": "OperationItem",
                            "type": "object"
                        },
                        "OperationsTypes": {
                            "enum": [
                                "concatenate",
                                "lower_case",
                                "upper_case",
                                "split_by",
                                "replace_by",
                                "strip_spaces"
                            ],
                            "title": "OperationsTypes",
                            "type": "string"
                        }
                    },
                    "properties": {
                        "first_argument": {
                            "description": "Value for the first argument.",
                            "title": "First Argument",
                            "type": "string"
                        },
                        "operations": {
                            "description": "Sequence of operations to perform.",
                            "items": {
                                "$ref": "#/$defs/OperationItem"
                            },
                            "title": "Operations",
                            "type": "array"
                        }
                    },
                    "required": [
                        "first_argument",
                        "operations"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "properties": {
                        "output_string": {
                            "description": "Output string.",
                            "title": "Output String",
                            "type": "string"
                        }
                    },
                    "required": [
                        "output_string"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/default_domino_pieces/tree/main/pieces/StringOperationsPiece"
            },
            "SleepPiece": {
                "name": "SleepPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements_0.txt"
                },
                "tags": [
                    "default",
                    "sleep"
                ],
                "style": {
                    "node_label": "Sleep",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#b3cde8"
                    },
                    "useIcon": true,
                    "icon_class_name": "fa-solid:hourglass-start",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "A Piece that sleeps for a given number of seconds.",
                "input_schema": {
                    "description": "Sleep Piece Input Model",
                    "properties": {
                        "sleep_time": {
                            "default": 1,
                            "description": "Number of seconds to sleep",
                            "title": "Sleep Time",
                            "type": "number"
                        }
                    },
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "description": "Sleep Piece Output Model",
                    "properties": {
                        "message": {
                            "description": "Sleep piece executed",
                            "title": "Message",
                            "type": "string"
                        }
                    },
                    "required": [
                        "message"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/default_domino_pieces/tree/main/pieces/SleepPiece"
            },
            "LoremIpsumGeneratorPiece": {
                "name": "LoremIpsumGeneratorPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements_0.txt"
                },
                "tags": [
                    "default",
                    "text"
                ],
                "style": {
                    "node_label": "Lorem Ipsum Generator",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#b3cde8"
                    },
                    "useIcon": true,
                    "icon_class_name": "carbon:character-sentence-case",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "A Piece that generates Lorem Ipsum text.",
                "input_schema": {
                    "$defs": {
                        "ItemsType": {
                            "enum": [
                                "words",
                                "sentences",
                                "paragraphs"
                            ],
                            "title": "ItemsType",
                            "type": "string"
                        }
                    },
                    "description": "LoremIpsumGeneratorPiece Input Model",
                    "properties": {
                        "items": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/ItemsType"
                                }
                            ],
                            "default": "words",
                            "description": "Type of items to generate."
                        },
                        "number_of_items": {
                            "default": 1,
                            "description": "Number of items to generate.",
                            "title": "Number Of Items",
                            "type": "integer"
                        }
                    },
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "description": "LoremIpsumGeneratorPiece Output Model",
                    "properties": {
                        "output_text": {
                            "description": "Generated text.",
                            "title": "Output Text",
                            "type": "string"
                        }
                    },
                    "required": [
                        "output_text"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/default_domino_pieces/tree/main/pieces/LoremIpsumGeneratorPiece"
            },
            "SaveImagePiece": {
                "name": "SaveImagePiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements_0.txt"
                },
                "tags": [
                    "default",
                    "image"
                ],
                "style": {
                    "node_label": "Save Image",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#b3cde8"
                    },
                    "useIcon": true,
                    "icon_class_name": "material-symbols:image-outline",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "Save base64 as image file to results folder.",
                "input_schema": {
                    "properties": {
                        "base64_data": {
                            "description": "Input data to be saved as image.",
                            "title": "Base64 Data",
                            "type": "string"
                        }
                    },
                    "required": [
                        "base64_data"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "properties": {
                        "output_image_path": {
                            "description": "Output file path of the saved image.",
                            "title": "Output Image Path",
                            "type": "string"
                        }
                    },
                    "required": [
                        "output_image_path"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/default_domino_pieces/tree/main/pieces/SaveImagePiece"
            },
            "GetDateTimePiece": {
                "name": "GetDateTimePiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements_0.txt"
                },
                "tags": [
                    "default",
                    "datetime"
                ],
                "style": {
                    "node_label": "Get Datetime",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#b3cde8"
                    },
                    "useIcon": true,
                    "icon_class_name": "fa:calendar-o",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "A Piece that gets system's current date and time.",
                "input_schema": {
                    "$defs": {
                        "TZOptions": {
                            "enum": [
                                "(UTC-11) - Pacific/Pago_Pago",
                                "(UTC-10) - US/Hawaii",
                                "(UTC-09) - Pacific/Gambier",
                                "(UTC-08) - US/Alaska",
                                "(UTC-07) - US/Pacific",
                                "(UTC-06) - US/Mountain",
                                "(UTC-05) - US/Central",
                                "(UTC-04) - US/Eastern",
                                "(UTC-03) - Canada/Atlantic",
                                "(UTC-02) - Atlantic/South_Georgia",
                                "(UTC-01) - Atlantic/Cape_Verde",
                                "(UTC+00) - UTC",
                                "(UTC+01) - Europe/London",
                                "(UTC+02) - Europe/Zurich",
                                "(UTC+03) - Indian/Mayotte",
                                "(UTC+04) - Asia/Tehran",
                                "(UTC+05) - Asia/Kathmandu",
                                "(UTC+06) - Indian/Cocos",
                                "(UTC+07) - Indian/Christmas",
                                "(UTC+08) - Australia/Eucla",
                                "(UTC+09) - Australia/Darwin",
                                "(UTC+10) - Australia/Lord_Howe",
                                "(UTC+11) - Pacific/Pohnpei",
                                "(UTC+12) - Pacific/Chatham",
                                "(UTC+13) - Pacific/Tongatapu",
                                "(UTC+14) - Pacific/Kiritimati"
                            ],
                            "title": "TZOptions",
                            "type": "string"
                        }
                    },
                    "description": "GetDateTimePiece Input Model",
                    "properties": {
                        "use_timezone": {
                            "default": false,
                            "description": "Whether to use a timezone for the timestamp.",
                            "title": "Use Timezone",
                            "type": "boolean"
                        },
                        "timezone": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/TZOptions"
                                }
                            ],
                            "default": "(UTC+00) - UTC",
                            "description": "Timezone to use for timestamp."
                        }
                    },
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "description": "GetDateTimePiece Output Model",
                    "properties": {
                        "date": {
                            "description": "Date of the timestamp, in ISO format.",
                            "format": "date",
                            "title": "Date",
                            "type": "string"
                        },
                        "time": {
                            "description": "Time of the timestamp, in ISO format.",
                            "format": "time",
                            "title": "Time",
                            "type": "string"
                        },
                        "datetime": {
                            "description": "Datetime of the timestamp, in ISO format.",
                            "format": "date-time",
                            "title": "Datetime",
                            "type": "string"
                        }
                    },
                    "required": [
                        "date",
                        "time",
                        "datetime"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/default_domino_pieces/tree/main/pieces/GetDateTimePiece"
            },
            "CustomPythonPiece": {
                "name": "CustomPythonPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements_0.txt"
                },
                "tags": [
                    "default",
                    "python"
                ],
                "style": {
                    "node_label": "Custom Python",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#b3cde8"
                    },
                    "useIcon": true,
                    "icon_class_name": "fa-brands:python",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "Executes user-defined Python code.",
                "input_schema": {
                    "$defs": {
                        "InputKwargsModel": {
                            "properties": {
                                "kwarg_name": {
                                    "default": null,
                                    "description": "Argument name.",
                                    "from_upstream": "never",
                                    "title": "Kwarg Name",
                                    "type": "string"
                                },
                                "kwarg_value": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "items": {},
                                            "type": "array"
                                        },
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "number"
                                        },
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "object"
                                        },
                                        {
                                            "format": "date",
                                            "type": "string"
                                        },
                                        {
                                            "format": "time",
                                            "type": "string"
                                        },
                                        {
                                            "format": "date-time",
                                            "type": "string"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Argument value.",
                                    "from_upstream": "always",
                                    "title": "Kwarg Value"
                                }
                            },
                            "title": "InputKwargsModel",
                            "type": "object"
                        },
                        "OutputModifierItemType": {
                            "description": "OutputArgsType Enum",
                            "enum": [
                                "string",
                                "integer",
                                "float",
                                "boolean",
                                "array"
                            ],
                            "title": "OutputModifierItemType",
                            "type": "string"
                        },
                        "OutputModifierModel": {
                            "properties": {
                                "name": {
                                    "description": "Name of the output argument.",
                                    "from_upstream": "never",
                                    "title": "Name",
                                    "type": "string"
                                },
                                "type": {
                                    "allOf": [
                                        {
                                            "$ref": "#/$defs/OutputModifierItemType"
                                        }
                                    ],
                                    "default": "string",
                                    "description": "Type of the output argument.",
                                    "from_upstream": "never"
                                },
                                "description": {
                                    "default": "",
                                    "description": "Description of the output argument.",
                                    "from_upstream": "never",
                                    "title": "Description",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "name"
                            ],
                            "title": "OutputModifierModel",
                            "type": "object"
                        }
                    },
                    "description": "CustomPythonPiece Input Model",
                    "properties": {
                        "input_args": {
                            "default": [
                                {
                                    "kwarg_name": "kwarg_2",
                                    "kwarg_value": ""
                                },
                                {
                                    "kwarg_name": "kwarg_1",
                                    "kwarg_value": ""
                                }
                            ],
                            "description": "Input arguments.",
                            "from_upstream": "never",
                            "items": {
                                "$ref": "#/$defs/InputKwargsModel"
                            },
                            "title": "Input Args",
                            "type": "array"
                        },
                        "script": {
                            "default": "# Do not modify the function definition line\ndef custom_function(kwarg_1, kwarg_2):\n    # Write your code here\n    print(f\"First argument: {kwarg_1}\")\n    print(f\"Second argument: {kwarg_2}\")\n\n    # Return the output of the function as an object,\n    # Matching the Output Args defined in the Form below\n    return {\n        \"output_1\": \"this is a string\",\n        \"output_2\": 420\n    }\n",
                            "description": "Python script.",
                            "from_upstream": "never",
                            "title": "Script",
                            "type": "string",
                            "widget": "codeeditor-python"
                        },
                        "output_args": {
                            "default": [
                                {
                                    "description": "An example string output",
                                    "name": "output_1",
                                    "type": "string"
                                },
                                {
                                    "description": "An example integer output",
                                    "name": "output_2",
                                    "type": "integer"
                                }
                            ],
                            "description": "Output arguments.",
                            "from_upstream": "never",
                            "items": {
                                "$ref": "#/$defs/OutputModifierModel"
                            },
                            "title": "Output Args",
                            "type": "array"
                        }
                    },
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "additionalProperties": true,
                    "description": "CustomPythonPiece Output Model",
                    "properties": {},
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/default_domino_pieces/tree/main/pieces/CustomPythonPiece"
            },
            "GetItemFromArrayPiece": {
                "name": "GetItemFromArrayPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements_0.txt"
                },
                "tags": [
                    "default",
                    "array"
                ],
                "style": {
                    "node_label": "Get Item From Array",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#b3cde8"
                    },
                    "useIcon": true,
                    "icon_class_name": "fluent:tray-item-remove-24-filled",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "Get one item from an input array.",
                "input_schema": {
                    "$defs": {
                        "IndexType": {
                            "enum": [
                                "first",
                                "last",
                                "random",
                                "another"
                            ],
                            "title": "IndexType",
                            "type": "string"
                        }
                    },
                    "description": "GetItemFromArrayPiece Input Model",
                    "properties": {
                        "input_array": {
                            "description": "Input array to get item from.",
                            "from_upstream": "always",
                            "items": {},
                            "title": "Input Array",
                            "type": "array"
                        },
                        "index": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/IndexType"
                                }
                            ],
                            "default": "first",
                            "description": "Index of item to get from input array."
                        },
                        "another_index": {
                            "default": 1,
                            "description": "Index number of item to get from input array.",
                            "minimum": 1,
                            "title": "Another Index",
                            "type": "integer"
                        }
                    },
                    "required": [
                        "input_array"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "description": "GetItemFromArrayPiece Output Model",
                    "properties": {
                        "output_value": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "items": {},
                                    "type": "array"
                                },
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "number"
                                },
                                {
                                    "type": "boolean"
                                },
                                {
                                    "type": "object"
                                },
                                {
                                    "format": "date",
                                    "type": "string"
                                },
                                {
                                    "format": "time",
                                    "type": "string"
                                },
                                {
                                    "format": "date-time",
                                    "type": "string"
                                }
                            ],
                            "description": "Item from input array at specified index.",
                            "title": "Output Value"
                        }
                    },
                    "required": [
                        "output_value"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/default_domino_pieces/tree/main/pieces/GetItemFromArrayPiece"
            },
            "DataConversionPiece": {
                "name": "DataConversionPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements_0.txt"
                },
                "tags": [
                    "data",
                    "conversion",
                    "default"
                ],
                "style": {
                    "node_label": "Data Conversion Piece",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#b3cde8"
                    },
                    "useIcon": true,
                    "icon_class_name": "icon-park-outline:file-conversion",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "Convert data from one format to another",
                "input_schema": {
                    "$defs": {
                        "DataFormatOption": {
                            "enum": [
                                "csv",
                                "json"
                            ],
                            "title": "DataFormatOption",
                            "type": "string"
                        }
                    },
                    "properties": {
                        "input_data": {
                            "description": "Input data to be converted. Can be a file path or data as string.",
                            "title": "Input Data",
                            "type": "string"
                        },
                        "input_data_format": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/DataFormatOption"
                                }
                            ],
                            "default": "csv",
                            "description": "Input data format to be converted."
                        },
                        "output_data_format": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/DataFormatOption"
                                }
                            ],
                            "default": "json",
                            "description": "Output data format."
                        }
                    },
                    "required": [
                        "input_data"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "properties": {
                        "output_file_path": {
                            "description": "Path to the converted file.",
                            "title": "Output File Path",
                            "type": "string"
                        }
                    },
                    "required": [
                        "output_file_path"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/default_domino_pieces/tree/main/pieces/DataConversionPiece"
            },
            "ToStringPiece": {
                "name": "ToStringPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements_0.txt"
                },
                "tags": [
                    "default",
                    "string"
                ],
                "style": {
                    "node_label": "To String",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#b3cde8"
                    },
                    "useIcon": true,
                    "icon_class_name": "solar:text-bold",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "A Piece that transforms any input to string.",
                "input_schema": {
                    "description": "ToStringPiece Input Model",
                    "properties": {
                        "input_value": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "items": {},
                                    "type": "array"
                                },
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "number"
                                },
                                {
                                    "type": "boolean"
                                },
                                {
                                    "type": "object"
                                },
                                {
                                    "format": "date",
                                    "type": "string"
                                },
                                {
                                    "format": "time",
                                    "type": "string"
                                },
                                {
                                    "format": "date-time",
                                    "type": "string"
                                }
                            ],
                            "description": "Input value to be turned into string.",
                            "from_upstream": "always",
                            "title": "Input Value"
                        }
                    },
                    "required": [
                        "input_value"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "description": "ToStringPiece Output Model",
                    "properties": {
                        "output_value": {
                            "description": "Input value as a string.",
                            "title": "Output Value",
                            "type": "string"
                        }
                    },
                    "required": [
                        "output_value"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/default_domino_pieces/tree/main/pieces/ToStringPiece"
            },
            "HttpRequestPiece": {
                "name": "HttpRequestPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements_0.txt"
                },
                "tags": [
                    "default",
                    "http",
                    "request"
                ],
                "style": {
                    "node_label": "HTTP Request",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#b3cde8"
                    },
                    "useIcon": true,
                    "icon_class_name": "material-symbols:send",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "Makes a HTTP request to a given URL.",
                "input_schema": {
                    "$defs": {
                        "MethodTypes": {
                            "enum": [
                                "GET",
                                "POST",
                                "PUT",
                                "DELETE"
                            ],
                            "title": "MethodTypes",
                            "type": "string"
                        }
                    },
                    "properties": {
                        "url": {
                            "description": "URL to make a request to.",
                            "title": "Url",
                            "type": "string"
                        },
                        "method": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/MethodTypes"
                                }
                            ],
                            "default": "GET",
                            "description": "HTTP method to use."
                        },
                        "bearer_token": {
                            "default": null,
                            "description": "Bearer token to use for authentication.",
                            "title": "Bearer Token",
                            "type": "string"
                        },
                        "body_json_data": {
                            "default": "{\n    \"key_1\": \"value_1\",\n    \"key_2\": \"value_2\"\n}\n",
                            "description": "JSON data to send in the request body.",
                            "title": "Body Json Data",
                            "type": "string",
                            "widget": "codeeditor-json"
                        }
                    },
                    "required": [
                        "url"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "properties": {
                        "base64_bytes_data": {
                            "description": "Output data as base64 encoded string.",
                            "title": "Base64 Bytes Data",
                            "type": "string"
                        }
                    },
                    "required": [
                        "base64_bytes_data"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/default_domino_pieces/tree/main/pieces/HttpRequestPiece"
            },
            "ToyDatasetsPiece": {
                "name": "ToyDatasetsPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements_0.txt"
                },
                "tags": [
                    "default",
                    "datasets"
                ],
                "style": {
                    "node_label": "Toy Datasets",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#b3cde8"
                    },
                    "useIcon": true,
                    "icon_class_name": "lucide:toy-brick",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "Load toy datasets from scikit-learn",
                "input_schema": {
                    "$defs": {
                        "DatasetName": {
                            "enum": [
                                "iris",
                                "diabetes",
                                "digits",
                                "wine",
                                "breast_cancer",
                                "linnerrud"
                            ],
                            "title": "DatasetName",
                            "type": "string"
                        }
                    },
                    "properties": {
                        "dataset": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/DatasetName"
                                }
                            ],
                            "default": "iris",
                            "title": "Dataset name"
                        }
                    },
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "properties": {
                        "file_path": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "default": null,
                            "title": "File path"
                        }
                    },
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/default_domino_pieces/tree/main/pieces/ToyDatasetsPiece"
            },
            "PageScrapperPiece": {
                "name": "PageScrapperPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements_0.txt"
                },
                "tags": [
                    "default",
                    "scrapper"
                ],
                "style": {
                    "node_label": "Page Scrapper",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#b3cde8"
                    },
                    "useIcon": true,
                    "icon_class_name": "lucide:text-selection",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "Scrapes text from a web page, given a URL and a list of HTML tags.",
                "input_schema": {
                    "$defs": {
                        "ItemType": {
                            "properties": {
                                "tag": {
                                    "default": "p",
                                    "description": "HTML tag name.",
                                    "title": "Tag",
                                    "type": "string"
                                },
                                "class_name": {
                                    "default": "",
                                    "description": "HTML tag class name.",
                                    "title": "Class Name",
                                    "type": "string"
                                }
                            },
                            "title": "ItemType",
                            "type": "object"
                        }
                    },
                    "description": "PageScrapperPiece Input Model",
                    "properties": {
                        "url": {
                            "default": "",
                            "description": "URL to retrieve content from.",
                            "title": "Url",
                            "type": "string"
                        },
                        "search_items": {
                            "default": [
                                {
                                    "class_name": "",
                                    "tag": "p"
                                }
                            ],
                            "description": "List of HTML tags and class names to search for.",
                            "items": {
                                "$ref": "#/$defs/ItemType"
                            },
                            "title": "Search Items",
                            "type": "array"
                        }
                    },
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "description": "PageScrapperPiece Output Model",
                    "properties": {
                        "scrapped_text": {
                            "description": "Scrapped text from the URL.",
                            "title": "Scrapped Text",
                            "type": "string"
                        }
                    },
                    "required": [
                        "scrapped_text"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/default_domino_pieces/tree/main/pieces/PageScrapperPiece"
            },
            "LogPiece": {
                "name": "LogPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements_0.txt"
                },
                "tags": [
                    "default",
                    "log"
                ],
                "style": {
                    "node_label": "Log",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#b3cde8"
                    },
                    "useIcon": true,
                    "icon_class_name": "fa-solid:file-alt",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "A Piece that logs its inputs.",
                "input_schema": {
                    "$defs": {
                        "InputEnum": {
                            "enum": [
                                "option1",
                                "option2",
                                "option3"
                            ],
                            "title": "InputEnum",
                            "type": "string"
                        }
                    },
                    "description": "LogPiece Input Model",
                    "properties": {
                        "input_str": {
                            "default": "default value",
                            "description": "Input string to be logged.",
                            "title": "Input Str",
                            "type": "string"
                        },
                        "input_int": {
                            "default": 10,
                            "description": "Input integer to be logged.",
                            "title": "Input Int",
                            "type": "integer"
                        },
                        "input_float": {
                            "default": 10.5,
                            "description": "Input float to be logged.",
                            "title": "Input Float",
                            "type": "number"
                        },
                        "input_bool": {
                            "default": false,
                            "description": "Input boolean to be logged.",
                            "title": "Input Bool",
                            "type": "boolean"
                        },
                        "input_enum": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/InputEnum"
                                }
                            ],
                            "default": "option1",
                            "description": "Input enum to be logged."
                        },
                        "input_date": {
                            "default": "2023-01-01",
                            "description": "Input date to be logged.",
                            "format": "date",
                            "title": "Input Date",
                            "type": "string"
                        },
                        "input_time": {
                            "default": "16:20:00",
                            "description": "Input time to be logged.",
                            "format": "time",
                            "title": "Input Time",
                            "type": "string"
                        },
                        "input_datetime": {
                            "default": "2023-01-01T16:20:00",
                            "description": "Input datetime to be logged.",
                            "format": "date-time",
                            "title": "Input Datetime",
                            "type": "string"
                        },
                        "input_array": {
                            "default": [
                                "default_1",
                                "default_2",
                                "default_3"
                            ],
                            "description": "Input array to be logged.",
                            "items": {
                                "type": "string"
                            },
                            "title": "Input Array",
                            "type": "array"
                        },
                        "input_code": {
                            "default": "print('Hello world!')",
                            "description": "Input code to be logged.",
                            "title": "Input Code",
                            "type": "string",
                            "widget": "codeeditor"
                        }
                    },
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "description": "LogPiece Output Model",
                    "properties": {
                        "output_log": {
                            "description": "All values logged.",
                            "title": "Output Log",
                            "type": "string"
                        },
                        "output_str": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Output string logged.",
                            "title": "Output Str"
                        },
                        "output_int": {
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Output integer logged.",
                            "title": "Output Int"
                        },
                        "output_float": {
                            "anyOf": [
                                {
                                    "type": "number"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Output float logged.",
                            "title": "Output Float"
                        },
                        "output_bool": {
                            "anyOf": [
                                {
                                    "type": "boolean"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Output boolean logged.",
                            "title": "Output Bool"
                        },
                        "output_enum": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Output enum logged.",
                            "title": "Output Enum"
                        },
                        "output_date": {
                            "description": "Output date logged.",
                            "format": "date",
                            "title": "Output Date",
                            "type": "string"
                        },
                        "output_time": {
                            "description": "Output time logged.",
                            "format": "time",
                            "title": "Output Time",
                            "type": "string"
                        },
                        "output_datetime": {
                            "description": "Output datetime logged.",
                            "format": "date-time",
                            "title": "Output Datetime",
                            "type": "string"
                        },
                        "output_array": {
                            "description": "Output array logged.",
                            "items": {
                                "type": "string"
                            },
                            "title": "Output Array",
                            "type": "array"
                        },
                        "output_code": {
                            "description": "Output code logged.",
                            "title": "Output Code",
                            "type": "string",
                            "widget": "codeeditor"
                        }
                    },
                    "required": [
                        "output_log",
                        "output_str",
                        "output_int",
                        "output_float",
                        "output_bool",
                        "output_enum",
                        "output_date",
                        "output_time",
                        "output_datetime",
                        "output_array",
                        "output_code"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/default_domino_pieces/tree/main/pieces/LogPiece"
            },
            "ImageFilterPiece": {
                "name": "ImageFilterPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements_0.txt"
                },
                "tags": [
                    "default",
                    "image"
                ],
                "style": {
                    "node_label": "Image Filter",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#b3cde8"
                    },
                    "useIcon": true,
                    "icon_class_name": "ic:twotone-filter",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "A Piece that applies selected image filters to an image.",
                "input_schema": {
                    "$defs": {
                        "OutputTypeType": {
                            "description": "Output type for the result text",
                            "enum": [
                                "file",
                                "base64_string",
                                "both"
                            ],
                            "title": "OutputTypeType",
                            "type": "string"
                        }
                    },
                    "properties": {
                        "input_image": {
                            "description": "Input image. It should be either a path to a file, or a base64 encoded string.",
                            "from_upstream": "always",
                            "title": "Input Image",
                            "type": "string"
                        },
                        "sepia": {
                            "default": false,
                            "description": "Apply sepia effect.",
                            "title": "Sepia",
                            "type": "boolean"
                        },
                        "black_and_white": {
                            "default": false,
                            "description": "Apply black and white effect.",
                            "title": "Black And White",
                            "type": "boolean"
                        },
                        "brightness": {
                            "default": false,
                            "description": "Apply brightness effect.",
                            "title": "Brightness",
                            "type": "boolean"
                        },
                        "darkness": {
                            "default": false,
                            "description": "Apply darkness effect.",
                            "title": "Darkness",
                            "type": "boolean"
                        },
                        "contrast": {
                            "default": false,
                            "description": "Apply contrast effect.",
                            "title": "Contrast",
                            "type": "boolean"
                        },
                        "red": {
                            "default": false,
                            "description": "Apply red effect.",
                            "title": "Red",
                            "type": "boolean"
                        },
                        "green": {
                            "default": false,
                            "description": "Apply green effect.",
                            "title": "Green",
                            "type": "boolean"
                        },
                        "blue": {
                            "default": false,
                            "description": "Apply blue effect.",
                            "title": "Blue",
                            "type": "boolean"
                        },
                        "cool": {
                            "default": false,
                            "description": "Apply cool effect.",
                            "title": "Cool",
                            "type": "boolean"
                        },
                        "warm": {
                            "default": false,
                            "description": "Apply warm effect.",
                            "title": "Warm",
                            "type": "boolean"
                        },
                        "output_type": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/OutputTypeType"
                                }
                            ],
                            "default": "both",
                            "description": "Format of the output image. Options are: `file`, `base64_string`, `both`."
                        }
                    },
                    "required": [
                        "input_image"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "properties": {
                        "image_base64_string": {
                            "default": "",
                            "description": "Base64 encoded string of the output image.",
                            "title": "Image Base64 String",
                            "type": "string"
                        },
                        "image_file_path": {
                            "default": "",
                            "description": "Path to the output image file.",
                            "title": "Image File Path",
                            "type": "string"
                        }
                    },
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/default_domino_pieces/tree/main/pieces/ImageFilterPiece"
            },
            "StringConditionChecksPiece": {
                "name": "StringConditionChecksPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements_0.txt"
                },
                "tags": [
                    "default",
                    "string"
                ],
                "style": {
                    "node_label": "String Conditions Checks",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#b3cde8"
                    },
                    "useIcon": true,
                    "icon_class_name": "mdi:format-letter-matches",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "A Piece that checks conditions on a string",
                "input_schema": {
                    "$defs": {
                        "ChecksTypes": {
                            "enum": [
                                "contains_case_sensitive",
                                "contains_case_insensitive",
                                "length_greater_than",
                                "length_greater_than_or_equal_to",
                                "length_less_than",
                                "length_less_than_or_equal_to",
                                "length_equal_to",
                                "regex_match"
                            ],
                            "title": "ChecksTypes",
                            "type": "string"
                        },
                        "LogicalOperators": {
                            "enum": [
                                "and",
                                "or"
                            ],
                            "title": "LogicalOperators",
                            "type": "string"
                        },
                        "OperationItem": {
                            "properties": {
                                "operation": {
                                    "allOf": [
                                        {
                                            "$ref": "#/$defs/ChecksTypes"
                                        }
                                    ],
                                    "description": "Operation to perform.\nOptions: `contains_case_sensitive`, `contains_case_insensitive`, `length_greater_than`, `length_greater_than_or_equal_to`, `length_less_than`, `length_less_than_or_equal_to`, `length_equal_to`, `regex_match`.\n",
                                    "from_upstream": "never"
                                },
                                "second_argument": {
                                    "default": "",
                                    "description": "Value for the second argument.\nIf `contains_case_sensitive` or `contains_case_insensitive` are selected, this argument will be used as the string to search for.\nIf `length_greater_than`, `length_greater_than_or_equal_to`, `length_less_than`, `length_less_than_or_equal_to` or `length_equal_to` are selected, this argument will be used as the integer value to compare with.\nIf `regex_match` is selected, this argument will be used as the string to match with the regex pattern.\n",
                                    "title": "Second Argument",
                                    "type": "string"
                                },
                                "next_logical_operator": {
                                    "allOf": [
                                        {
                                            "$ref": "#/$defs/LogicalOperators"
                                        }
                                    ],
                                    "default": "and",
                                    "description": "Logical operator to use with the next operation result."
                                }
                            },
                            "required": [
                                "operation"
                            ],
                            "title": "OperationItem",
                            "type": "object"
                        }
                    },
                    "properties": {
                        "input_string": {
                            "description": "Input string.",
                            "title": "Input String",
                            "type": "string"
                        },
                        "operations": {
                            "description": "Sequence of operations to perform.",
                            "items": {
                                "$ref": "#/$defs/OperationItem"
                            },
                            "title": "Operations",
                            "type": "array"
                        }
                    },
                    "required": [
                        "input_string",
                        "operations"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "properties": {
                        "check_result": {
                            "description": "Result of the checks.",
                            "title": "Check Result",
                            "type": "boolean"
                        }
                    },
                    "required": [
                        "check_result"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/default_domino_pieces/tree/main/pieces/StringConditionChecksPiece"
            }
        }
    },
    "openai_domino_pieces": {
        "version": "0.7.0",
        "url": "https://github.com/Tauffer-Consulting/openai_domino_pieces",
        "pieces": {
            "TextGeneratorPiece": {
                "name": "TextGeneratorPiece",
                "dependency": {
                    "dockerfile": "Dockerfile_01",
                    "requirements_file": null
                },
                "tags": [
                    "openai",
                    "text generation"
                ],
                "style": {
                    "node_label": "Text Generator",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#ebebeb"
                    },
                    "useIcon": true,
                    "icon_class_name": "fa-solid:i-cursor",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "This Piece allows you to create a custom prompt with your own arguments and send it to OpenAI for text generation.",
                "input_schema": {
                    "$defs": {
                        "InnerArgModel": {
                            "description": "Inner argument model to use in the prompt args",
                            "properties": {
                                "arg_name": {
                                    "description": "Name of the prompt argument.",
                                    "from_upstream": "never",
                                    "title": "Arg Name",
                                    "type": "string"
                                },
                                "arg_value": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "items": {},
                                            "type": "array"
                                        },
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "number"
                                        },
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "object"
                                        },
                                        {
                                            "format": "date",
                                            "type": "string"
                                        },
                                        {
                                            "format": "time",
                                            "type": "string"
                                        },
                                        {
                                            "format": "date-time",
                                            "type": "string"
                                        }
                                    ],
                                    "description": "Value of the prompt argument.",
                                    "from_upstream": "always",
                                    "title": "Arg Value"
                                }
                            },
                            "required": [
                                "arg_name",
                                "arg_value"
                            ],
                            "title": "InnerArgModel",
                            "type": "object"
                        },
                        "LLMModelType": {
                            "description": "OpenAI model type",
                            "enum": [
                                "gpt-3.5-turbo",
                                "gpt-4"
                            ],
                            "title": "LLMModelType",
                            "type": "string"
                        },
                        "OutputTypeType": {
                            "description": "Output type for the generated text",
                            "enum": [
                                "file",
                                "string",
                                "file_and_string"
                            ],
                            "title": "OutputTypeType",
                            "type": "string"
                        }
                    },
                    "description": "TextGeneratorPiece Input model",
                    "properties": {
                        "template": {
                            "default": "What is the capital city of {country}?",
                            "description": "Compose a prompt template using the {arg_name} notation to insert arguments.",
                            "title": "Template",
                            "type": "string",
                            "widget": "textarea"
                        },
                        "prompt_args": {
                            "default": [
                                {
                                    "arg_name": "country",
                                    "arg_value": "Brazil"
                                }
                            ],
                            "description": "List of arguments to insert into the prompt.",
                            "items": {
                                "$ref": "#/$defs/InnerArgModel"
                            },
                            "title": "Prompt Args",
                            "type": "array"
                        },
                        "output_type": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/OutputTypeType"
                                }
                            ],
                            "default": "string",
                            "description": "The type of output to return."
                        },
                        "openai_model": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/LLMModelType"
                                }
                            ],
                            "default": "gpt-3.5-turbo",
                            "description": "OpenAI model name."
                        },
                        "completion_max_tokens": {
                            "default": 500,
                            "description": "The maximum number of tokens in the generated text.",
                            "title": "Completion Max Tokens",
                            "type": "integer"
                        },
                        "temperature": {
                            "default": 0.3,
                            "description": "Temperature of the model, between 0 (more precise) and 1 (more creative).",
                            "exclusiveMaximum": 1.0,
                            "exclusiveMinimum": 0.0,
                            "title": "Temperature",
                            "type": "number"
                        }
                    },
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "description": "TextGeneratorPiece Output model",
                    "properties": {
                        "string_generated_text": {
                            "default": null,
                            "description": "The generated text as a string",
                            "title": "String Generated Text",
                            "type": "string"
                        },
                        "file_path_generated_text": {
                            "default": null,
                            "description": "The path to text file containing generated text",
                            "title": "File Path Generated Text",
                            "type": "string"
                        }
                    },
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": {
                    "description": "TextGeneratorPiece Secrets model",
                    "properties": {
                        "OPENAI_API_KEY": {
                            "description": "Your OpenAI API key",
                            "title": "Openai Api Key",
                            "type": "string"
                        }
                    },
                    "required": [
                        "OPENAI_API_KEY"
                    ],
                    "title": "SecretsModel",
                    "type": "object"
                },
                "source_url": "https://github.com/Tauffer-Consulting/openai_domino_pieces/tree/main/pieces/TextGeneratorPiece"
            },
            "InformationExtractionPiece": {
                "name": "InformationExtractionPiece",
                "dependency": {
                    "dockerfile": "Dockerfile_01",
                    "requirements_file": null
                },
                "tags": [
                    "text",
                    "information extraction",
                    "openai"
                ],
                "style": {
                    "node_label": "Information Extraction",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#ebebeb"
                    },
                    "useIcon": true,
                    "icon_class_name": "fa-solid:align-right",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "Extracts user-defined information from the input text.",
                "input_schema": {
                    "$defs": {
                        "LLMModelType": {
                            "description": "OpenAI model type",
                            "enum": [
                                "gpt-3.5-turbo-1106",
                                "gpt-4"
                            ],
                            "title": "LLMModelType",
                            "type": "string"
                        },
                        "OutputModifierItemType": {
                            "description": "OutputArgsType Enum",
                            "enum": [
                                "string",
                                "integer",
                                "float",
                                "boolean",
                                "array"
                            ],
                            "title": "OutputModifierItemType",
                            "type": "string"
                        },
                        "OutputModifierModel": {
                            "properties": {
                                "name": {
                                    "description": "Name of the output argument.",
                                    "from_upstream": "never",
                                    "title": "Name",
                                    "type": "string"
                                },
                                "type": {
                                    "allOf": [
                                        {
                                            "$ref": "#/$defs/OutputModifierItemType"
                                        }
                                    ],
                                    "default": "string",
                                    "description": "Type of the output argument.",
                                    "from_upstream": "never"
                                },
                                "description": {
                                    "default": "",
                                    "description": "Description of the output argument.",
                                    "from_upstream": "never",
                                    "title": "Description",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "name"
                            ],
                            "title": "OutputModifierModel",
                            "type": "object"
                        }
                    },
                    "description": "InformationExtractionPiece Input model",
                    "properties": {
                        "input_text": {
                            "description": "Source text from where information should be extracted.",
                            "from_upstream": "always",
                            "title": "Input Text",
                            "type": "string"
                        },
                        "openai_model": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/LLMModelType"
                                }
                            ],
                            "default": "gpt-3.5-turbo-1106",
                            "description": "OpenAI model name to use for information extraction."
                        },
                        "extract_items": {
                            "default": [
                                {
                                    "description": "Name of the person.",
                                    "name": "name",
                                    "type": "string"
                                },
                                {
                                    "description": "Age of the person.",
                                    "name": "age",
                                    "type": "integer"
                                }
                            ],
                            "description": "Information items to be extracted from source text.",
                            "from_upstream": "never",
                            "items": {
                                "$ref": "#/$defs/OutputModifierModel"
                            },
                            "title": "Extract Items",
                            "type": "array"
                        }
                    },
                    "required": [
                        "input_text"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "additionalProperties": true,
                    "description": "InformationExtractionPiece Output Model",
                    "properties": {},
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": {
                    "description": "InformationExtractionPiece Secrets model",
                    "properties": {
                        "OPENAI_API_KEY": {
                            "description": "Your OpenAI API key.",
                            "title": "Openai Api Key",
                            "type": "string"
                        }
                    },
                    "required": [
                        "OPENAI_API_KEY"
                    ],
                    "title": "SecretsModel",
                    "type": "object"
                },
                "source_url": "https://github.com/Tauffer-Consulting/openai_domino_pieces/tree/main/pieces/InformationExtractionPiece"
            },
            "AudioTranscriptionPiece": {
                "name": "AudioTranscriptionPiece",
                "dependency": {
                    "dockerfile": "Dockerfile_01",
                    "requirements_file": null
                },
                "tags": [
                    "OpenAI"
                ],
                "style": {
                    "node_label": "OpenAI Audio Transcript",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#ebebeb"
                    },
                    "useIcon": true,
                    "icon_class_name": "fa-solid:comment-dots",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "This Piece uses the OpenAI API to extract text transcripts from audio.",
                "container_resources": {
                    "requests": {
                        "cpu": "100m",
                        "memory": "128Mi"
                    },
                    "limits": {
                        "cpu": "500m",
                        "memory": "512Mi"
                    }
                },
                "input_schema": {
                    "$defs": {
                        "OutputTypeType": {
                            "enum": [
                                "file",
                                "string",
                                "both"
                            ],
                            "title": "OutputTypeType",
                            "type": "string"
                        }
                    },
                    "properties": {
                        "audio_file_path": {
                            "description": "The path to the audio file to process.",
                            "from_upstream": "always",
                            "title": "Audio File Path",
                            "type": "string"
                        },
                        "output_type": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/OutputTypeType"
                                }
                            ],
                            "default": "string",
                            "description": "The type of output for the result text. Options are `string`, `file` or `both`. Default is `string`."
                        },
                        "temperature": {
                            "default": 0.1,
                            "description": "What sampling temperature to use, between 0 and 1",
                            "exclusiveMinimum": 0.0,
                            "maximum": 1.0,
                            "title": "Temperature",
                            "type": "number"
                        }
                    },
                    "required": [
                        "audio_file_path"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "properties": {
                        "transcription_result": {
                            "default": "",
                            "description": "The result transcription text as a string.",
                            "title": "Transcription Result",
                            "type": "string"
                        },
                        "file_path_transcription_result": {
                            "default": "",
                            "description": "The path to the text file with the transcription result.",
                            "title": "File Path Transcription Result",
                            "type": "string"
                        }
                    },
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": {
                    "properties": {
                        "OPENAI_API_KEY": {
                            "description": "OpenAI API key",
                            "title": "Openai Api Key",
                            "type": "string"
                        }
                    },
                    "required": [
                        "OPENAI_API_KEY"
                    ],
                    "title": "SecretsModel",
                    "type": "object"
                },
                "source_url": "https://github.com/Tauffer-Consulting/openai_domino_pieces/tree/main/pieces/AudioTranscriptionPiece"
            },
            "PromptCreatorForImageGeneratorPiece": {
                "name": "PromptCreatorForImageGeneratorPiece",
                "dependency": {
                    "dockerfile": "Dockerfile_01",
                    "requirements_file": null
                },
                "tags": [],
                "style": {
                    "node_label": "Prompt Creator for Image Generator AI",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#ebebeb"
                    },
                    "useIcon": true,
                    "icon_class_name": "fa-solid:terminal",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "This Piece utilizes OpenAI to generates a prompt to pass to an image generator AI.",
                "input_schema": {
                    "$defs": {
                        "LLMModelType": {
                            "description": "OpenAI model type",
                            "enum": [
                                "gpt-3.5-turbo",
                                "gpt-4"
                            ],
                            "title": "LLMModelType",
                            "type": "string"
                        },
                        "OutputTypeType": {
                            "description": "Output type",
                            "enum": [
                                "file",
                                "string",
                                "file_and_string"
                            ],
                            "title": "OutputTypeType",
                            "type": "string"
                        }
                    },
                    "description": "PromptCreatorForImageGeneratorPiece input model",
                    "properties": {
                        "context": {
                            "description": "The context to generate an image from",
                            "title": "Context",
                            "type": "string"
                        },
                        "art_style": {
                            "default": "You know many art styles, so you always vary a lot on your suggestions!",
                            "description": "The art style to generate an image from. Your imagination is the limit!",
                            "title": "Art Style",
                            "type": "string"
                        },
                        "output_type": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/OutputTypeType"
                                }
                            ],
                            "default": "string",
                            "description": "The type of output to return"
                        },
                        "openai_model": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/LLMModelType"
                                }
                            ],
                            "default": "gpt-3.5-turbo",
                            "description": "OpenAI model to bring your character to life"
                        },
                        "completion_max_tokens": {
                            "default": 350,
                            "description": "The maximum number of tokens to generate the prompt.",
                            "title": "Completion Max Tokens",
                            "type": "integer"
                        },
                        "temperature": {
                            "default": 0.7,
                            "description": "Temperature of the model, between 0 (more precise) and 1 (more creative)",
                            "exclusiveMinimum": 0.0,
                            "maximum": 1.0,
                            "title": "Temperature",
                            "type": "number"
                        }
                    },
                    "required": [
                        "context"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "description": "PromptCreatorForImageGeneratorPiece output model",
                    "properties": {
                        "generated_prompt_string": {
                            "default": null,
                            "description": "The generated prompt to pass to an image generator AI",
                            "title": "Generated Prompt String",
                            "type": "string"
                        },
                        "generated_prompt_file_path": {
                            "default": null,
                            "description": "The path to the generated prompt, in .txt format",
                            "title": "Generated Prompt File Path",
                            "type": "string"
                        }
                    },
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": {
                    "description": "PromptCreatorForImageGeneratorPiece secrets model",
                    "properties": {
                        "OPENAI_API_KEY": {
                            "description": "Your OpenAI API key",
                            "title": "Openai Api Key",
                            "type": "string"
                        }
                    },
                    "required": [
                        "OPENAI_API_KEY"
                    ],
                    "title": "SecretsModel",
                    "type": "object"
                },
                "source_url": "https://github.com/Tauffer-Consulting/openai_domino_pieces/tree/main/pieces/PromptCreatorForImageGeneratorPiece"
            },
            "TextTaggingPiece": {
                "name": "TextTaggingPiece",
                "dependency": {
                    "dockerfile": "Dockerfile_01",
                    "requirements_file": null
                },
                "tags": [
                    "openai",
                    "text classification"
                ],
                "style": {
                    "node_label": "Text Tagging",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#ebebeb"
                    },
                    "useIcon": true,
                    "icon_class_name": "fa-solid:i-cursor",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "classification of text with user defined tags",
                "input_schema": {
                    "$defs": {
                        "LLMModelType": {
                            "description": "OpenAI model type",
                            "enum": [
                                "gpt-3.5-turbo-1106",
                                "gpt-4"
                            ],
                            "title": "LLMModelType",
                            "type": "string"
                        },
                        "OutputModifierItemType": {
                            "description": "OutputArgsType Enum",
                            "enum": [
                                "string",
                                "integer",
                                "float",
                                "boolean",
                                "array"
                            ],
                            "title": "OutputModifierItemType",
                            "type": "string"
                        },
                        "OutputModifierModel": {
                            "description": "OutputModifierModel with extra fields",
                            "properties": {
                                "name": {
                                    "description": "Name of the output argument.",
                                    "from_upstream": "never",
                                    "title": "Name",
                                    "type": "string"
                                },
                                "type": {
                                    "allOf": [
                                        {
                                            "$ref": "#/$defs/OutputModifierItemType"
                                        }
                                    ],
                                    "default": "string",
                                    "description": "Type of the output argument.",
                                    "from_upstream": "never"
                                },
                                "description": {
                                    "default": "",
                                    "description": "Description of the output argument.",
                                    "from_upstream": "never",
                                    "title": "Description",
                                    "type": "string"
                                },
                                "enum": {
                                    "default": "",
                                    "description": "Comma separated list of possible values for the output modifier. Example: 'negative,neutral,positive'. If not provided, this will be ignored. ",
                                    "title": "Enum",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "name"
                            ],
                            "title": "OutputModifierModel",
                            "type": "object"
                        }
                    },
                    "description": "TextTaggingPiece Input model",
                    "properties": {
                        "input_text": {
                            "description": "Source text to be tagged.",
                            "title": "Input Text",
                            "type": "string"
                        },
                        "openai_model": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/LLMModelType"
                                }
                            ],
                            "default": "gpt-3.5-turbo-1106",
                            "description": "OpenAI model name to use for tagging."
                        },
                        "tags": {
                            "default": [
                                {
                                    "description": "Sentiment of the text. Should be a number between -1 and 1.",
                                    "enum": "",
                                    "name": "sentiment",
                                    "type": "float"
                                }
                            ],
                            "description": "Tags to classify the source text.",
                            "from_upstream": "never",
                            "items": {
                                "$ref": "#/$defs/OutputModifierModel"
                            },
                            "title": "Tags",
                            "type": "array"
                        },
                        "temperature": {
                            "default": 0.0,
                            "description": "Temperature of the model, between 0 (more precise) and 1 (more creative).",
                            "exclusiveMaximum": 1.0,
                            "exclusiveMinimum": 0.0,
                            "title": "Temperature",
                            "type": "number"
                        }
                    },
                    "required": [
                        "input_text"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "additionalProperties": true,
                    "description": "TextTaggingPiece Output Model",
                    "properties": {},
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": {
                    "description": "TextTaggingPiece Secrets model",
                    "properties": {
                        "OPENAI_API_KEY": {
                            "description": "Your OpenAI API key.",
                            "title": "Openai Api Key",
                            "type": "string"
                        }
                    },
                    "required": [
                        "OPENAI_API_KEY"
                    ],
                    "title": "SecretsModel",
                    "type": "object"
                },
                "source_url": "https://github.com/Tauffer-Consulting/openai_domino_pieces/tree/main/pieces/TextTaggingPiece"
            },
            "AudioTranscriptionLocalPiece": {
                "name": "AudioTranscriptionLocalPiece",
                "dependency": {
                    "dockerfile": "Dockerfile_whisper",
                    "requirements_file": null
                },
                "tags": [],
                "style": {
                    "node_label": "Audio Transcription Local",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#ebebeb"
                    },
                    "useIcon": true,
                    "icon_class_name": "fa-solid:comment-dots",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "Runs transcription locally using Whisper, a general-purpose speech recognition model. Ref: https://github.com/openai/whisper",
                "container_resources": {
                    "use_gpu": true,
                    "requests": {
                        "cpu": "1000m",
                        "memory": "3Gi"
                    },
                    "limits": {
                        "cpu": "5000m",
                        "memory": "15Gi"
                    }
                },
                "input_schema": {
                    "$defs": {
                        "ModelSizeType": {
                            "enum": [
                                "tiny",
                                "base",
                                "small",
                                "medium",
                                "large"
                            ],
                            "title": "ModelSizeType",
                            "type": "string"
                        },
                        "OutputTypeType": {
                            "enum": [
                                "string",
                                "file",
                                "both"
                            ],
                            "title": "OutputTypeType",
                            "type": "string"
                        }
                    },
                    "properties": {
                        "audio_file_path": {
                            "description": "The path to the audio file to process.",
                            "from_upstream": "always",
                            "title": "Audio File Path",
                            "type": "string"
                        },
                        "output_type": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/OutputTypeType"
                                }
                            ],
                            "default": "string",
                            "description": "The type of output for the result text. Options are `string`, `file` or `both`. Default is `string`."
                        },
                        "model_size": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/ModelSizeType"
                                }
                            ],
                            "default": "tiny",
                            "description": "The size of the model to use. Default is tiny."
                        }
                    },
                    "required": [
                        "audio_file_path"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "properties": {
                        "transcription_result": {
                            "default": "",
                            "description": "The result transcription text as a string.",
                            "title": "Transcription Result",
                            "type": "string"
                        },
                        "file_path_transcription_result": {
                            "anyOf": [
                                {
                                    "format": "file-path",
                                    "type": "string"
                                },
                                {
                                    "type": "string"
                                }
                            ],
                            "default": "",
                            "description": "The path to the text file with the transcription result.",
                            "title": "File Path Transcription Result"
                        }
                    },
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/openai_domino_pieces/tree/main/pieces/AudioTranscriptionLocalPiece"
            },
            "ImageGeneratorPiece": {
                "name": "ImageGeneratorPiece",
                "dependency": {
                    "dockerfile": "Dockerfile_01",
                    "requirements_file": null
                },
                "tags": [],
                "style": {
                    "node_label": "DALL-E Image Generator",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#ebebeb"
                    },
                    "useIcon": true,
                    "icon_class_name": "fa-solid:image",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "This Piece utilizes DALL-E, an OpenAI model that generates images based on a prompt.",
                "input_schema": {
                    "$defs": {
                        "ImageFormat": {
                            "description": "Image format to return",
                            "enum": [
                                "url",
                                "image_png",
                                "base64_string"
                            ],
                            "title": "ImageFormat",
                            "type": "string"
                        },
                        "ImageSize": {
                            "description": "Image size to generate",
                            "enum": [
                                "1024x1024",
                                "512x512",
                                "256x256"
                            ],
                            "title": "ImageSize",
                            "type": "string"
                        },
                        "OutputTypeType": {
                            "description": "Output type for the result text",
                            "enum": [
                                "file",
                                "string",
                                "file_and_string"
                            ],
                            "title": "OutputTypeType",
                            "type": "string"
                        }
                    },
                    "description": "ImageGeneratorPiece input model",
                    "properties": {
                        "prompt": {
                            "description": "A text description of the desired image",
                            "title": "Prompt",
                            "type": "string"
                        },
                        "size": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/ImageSize"
                                }
                            ],
                            "default": "1024x1024",
                            "description": "The size of the generated images"
                        },
                        "image_format": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/ImageFormat"
                                }
                            ],
                            "default": "url",
                            "description": "The format in which the generated image is returned"
                        },
                        "output_type": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/OutputTypeType"
                                }
                            ],
                            "default": "string",
                            "description": "The type of the output. Attention: if Response Format equals to image_png, then Output Type must be file type."
                        }
                    },
                    "required": [
                        "prompt"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "description": "ImageGeneratorPiece output model",
                    "properties": {
                        "output_string": {
                            "default": null,
                            "description": "The generated image as string",
                            "title": "Output String",
                            "type": "string"
                        },
                        "output_file_path": {
                            "default": null,
                            "description": "Path to the generated image",
                            "title": "Output File Path",
                            "type": "string"
                        }
                    },
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": {
                    "description": "ImageGeneratorPiece secrets model",
                    "properties": {
                        "OPENAI_API_KEY": {
                            "description": "Your OpenAI API key",
                            "title": "Openai Api Key",
                            "type": "string"
                        }
                    },
                    "required": [
                        "OPENAI_API_KEY"
                    ],
                    "title": "SecretsModel",
                    "type": "object"
                },
                "source_url": "https://github.com/Tauffer-Consulting/openai_domino_pieces/tree/main/pieces/ImageGeneratorPiece"
            },
            "TextSummarizerPiece": {
                "name": "TextSummarizerPiece",
                "dependency": {
                    "dockerfile": "Dockerfile_01",
                    "requirements_file": null
                },
                "tags": [
                    "text",
                    "summarizer",
                    "openai"
                ],
                "style": {
                    "node_label": "Text Summarizer",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#ebebeb"
                    },
                    "useIcon": true,
                    "icon_class_name": "fa-solid:align-right",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "This Piece runs a text summarizer using OpenAI API.",
                "input_schema": {
                    "$defs": {
                        "LLMModelType": {
                            "description": "OpenAI model type",
                            "enum": [
                                "gpt-3.5-turbo",
                                "gpt-4"
                            ],
                            "title": "LLMModelType",
                            "type": "string"
                        },
                        "OutputTypeType": {
                            "description": "Output type for the completion result",
                            "enum": [
                                "file",
                                "string",
                                "file_and_string"
                            ],
                            "title": "OutputTypeType",
                            "type": "string"
                        }
                    },
                    "description": "TextSummarizerPiece Input model",
                    "properties": {
                        "text": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "default": null,
                            "description": "Text to summarize",
                            "required": false,
                            "title": "Text"
                        },
                        "text_file_path": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "default": null,
                            "description": "Use it only if not using text field. File path to the text to summarize",
                            "required": false,
                            "title": "Text File Path"
                        },
                        "output_type": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/OutputTypeType"
                                }
                            ],
                            "default": "string",
                            "description": "The type of output to return"
                        },
                        "openai_model": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/LLMModelType"
                                }
                            ],
                            "default": "gpt-3.5-turbo",
                            "description": "OpenAI model name to use for summarization"
                        },
                        "chunk_size": {
                            "default": 1000,
                            "description": "Chunk size, measured in tokens, of each pre-summary chunk",
                            "title": "Chunk Size",
                            "type": "integer"
                        },
                        "chunk_overlap_rate": {
                            "default": 0.2,
                            "description": "The percentage of overlap between each chunk",
                            "title": "Chunk Overlap Rate",
                            "type": "number"
                        },
                        "completion_max_tokens": {
                            "default": 500,
                            "description": "The maximum number of tokens to generate in the summary.",
                            "title": "Completion Max Tokens",
                            "type": "integer"
                        },
                        "temperature": {
                            "default": 0.2,
                            "description": "Temperature of the model, between 0 (more precise) and 1 (more creative)",
                            "title": "Temperature",
                            "type": "number"
                        }
                    },
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "description": "TextSummarizerPiece Output model",
                    "properties": {
                        "string_summarized_text": {
                            "default": null,
                            "description": "summarized text",
                            "title": "String Summarized Text",
                            "type": "string"
                        },
                        "file_path_summarized_text": {
                            "default": null,
                            "description": "Path to summarized text file",
                            "title": "File Path Summarized Text",
                            "type": "string"
                        }
                    },
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": {
                    "description": "TextSummarizerPiece Secrets model",
                    "properties": {
                        "OPENAI_API_KEY": {
                            "description": "Your OpenAI API key",
                            "title": "Openai Api Key",
                            "type": "string"
                        }
                    },
                    "required": [
                        "OPENAI_API_KEY"
                    ],
                    "title": "SecretsModel",
                    "type": "object"
                },
                "source_url": "https://github.com/Tauffer-Consulting/openai_domino_pieces/tree/main/pieces/TextSummarizerPiece"
            }
        }
    },
    "social_media_domino_pieces": {
        "version": "0.5.1",
        "url": "https://github.com/Tauffer-Consulting/social_media_domino_pieces",
        "pieces": {
            "InstagramGetMediaPiece": {
                "name": "InstagramGetMediaPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": null
                },
                "tags": [
                    "Instagram"
                ],
                "style": {
                    "node_label": "Instagram Get Media",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#b3cde8"
                    },
                    "useIcon": true,
                    "icon_class_name": "fa-brands:instagram",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "Get all media information about the instagram account",
                "input_schema": {
                    "$defs": {
                        "OutputTypeType": {
                            "enum": [
                                "python_list",
                                "string",
                                "json_string"
                            ],
                            "title": "OutputTypeType",
                            "type": "string"
                        }
                    },
                    "description": "Get Instagram Media Input",
                    "properties": {
                        "facebook_page_name": {
                            "description": "Facebook page connected to the Instagram account",
                            "title": "Facebook Page Name",
                            "type": "string"
                        },
                        "output_type": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/OutputTypeType"
                                }
                            ],
                            "default": "string",
                            "description": "output type"
                        },
                        "id_field": {
                            "default": true,
                            "description": "if true, the id field will be returned",
                            "title": "Id Field",
                            "type": "boolean"
                        },
                        "media_type_field": {
                            "default": true,
                            "description": "if true, the media_type field will be returned",
                            "title": "Media Type Field",
                            "type": "boolean"
                        },
                        "caption_field": {
                            "default": true,
                            "description": "if true, the caption field will be returned",
                            "title": "Caption Field",
                            "type": "boolean"
                        },
                        "like_count_field": {
                            "default": true,
                            "description": "if true, the like_count field will be returned",
                            "title": "Like Count Field",
                            "type": "boolean"
                        },
                        "comments_count_field": {
                            "default": true,
                            "description": "if true, the comments_count field will be returned",
                            "title": "Comments Count Field",
                            "type": "boolean"
                        },
                        "permalink_field": {
                            "default": true,
                            "description": "if true, the permalink field will be returned",
                            "title": "Permalink Field",
                            "type": "boolean"
                        },
                        "timestamp_field": {
                            "default": true,
                            "description": "if true, the timestamp field will be returned",
                            "title": "Timestamp Field",
                            "type": "boolean"
                        },
                        "comments_field": {
                            "default": true,
                            "description": "if true, the comments field will be returned",
                            "title": "Comments Field",
                            "type": "boolean"
                        }
                    },
                    "required": [
                        "facebook_page_name"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "description": "Get Instagram Media Output",
                    "properties": {
                        "media_list": {
                            "default": null,
                            "description": "list of Instagram media posts",
                            "items": {},
                            "title": "Media List",
                            "type": "array"
                        },
                        "media_string": {
                            "default": null,
                            "description": "string of Instagram media posts",
                            "title": "Media String",
                            "type": "string"
                        },
                        "media_json_string": {
                            "default": null,
                            "description": "json string of Instagram media posts",
                            "title": "Media Json String",
                            "type": "string"
                        }
                    },
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": {
                    "description": "Get Instagram Media Secrets",
                    "properties": {
                        "INSTAGRAM_APP_ID": {
                            "description": "ID from a Facebook App",
                            "title": "Instagram App Id",
                            "type": "string"
                        },
                        "INSTAGRAM_APP_SECRET": {
                            "description": "Facebook app secret",
                            "title": "Instagram App Secret",
                            "type": "string"
                        },
                        "INSTAGRAM_ACCESS_TOKEN": {
                            "description": "Long lived token from a Facebook App",
                            "title": "Instagram Access Token",
                            "type": "string"
                        }
                    },
                    "required": [
                        "INSTAGRAM_APP_ID",
                        "INSTAGRAM_APP_SECRET",
                        "INSTAGRAM_ACCESS_TOKEN"
                    ],
                    "title": "SecretsModel",
                    "type": "object"
                },
                "source_url": "https://github.com/Tauffer-Consulting/social_media_domino_pieces/tree/main/pieces/InstagramGetMediaPiece"
            },
            "ImgurImageUploaderPiece": {
                "name": "ImgurImageUploaderPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements.txt"
                },
                "tags": [],
                "style": {
                    "node_label": "Imgur Image Uploader Piece",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#ebebeb"
                    },
                    "useIcon": true,
                    "icon_class_name": "fa-solid:file-upload",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "This Piece upload an image to Imgur.",
                "input_schema": {
                    "description": "ImgurImageUploaderPiece input model",
                    "properties": {
                        "image_path": {
                            "description": "The path to your image",
                            "title": "Image Path",
                            "type": "string"
                        },
                        "image_title": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "default": null,
                            "description": "The title for your image",
                            "title": "Image Title"
                        },
                        "image_description": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "default": null,
                            "description": "The description for your image",
                            "title": "Image Description"
                        },
                        "id_as_output": {
                            "default": true,
                            "description": "If true, the image id will be returned as an output",
                            "title": "Id As Output",
                            "type": "boolean"
                        },
                        "title_as_output": {
                            "default": true,
                            "description": "If true, the image title will be returned as an output",
                            "title": "Title As Output",
                            "type": "boolean"
                        },
                        "description_as_output": {
                            "default": true,
                            "description": "If true, the image description will be returned as an output",
                            "title": "Description As Output",
                            "type": "boolean"
                        },
                        "delete_hash_as_output": {
                            "default": true,
                            "description": "If true, the image delete hash will be returned as an output",
                            "title": "Delete Hash As Output",
                            "type": "boolean"
                        },
                        "url_as_output": {
                            "default": true,
                            "description": "If true, the image link will be returned as an output",
                            "title": "Url As Output",
                            "type": "boolean"
                        }
                    },
                    "required": [
                        "image_path"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "description": "ImgurImageUploaderPiece output model",
                    "properties": {
                        "image_id": {
                            "default": "",
                            "description": "The image id",
                            "title": "Image Id",
                            "type": "string"
                        },
                        "image_title": {
                            "default": "",
                            "description": "The image title",
                            "title": "Image Title",
                            "type": "string"
                        },
                        "image_description": {
                            "default": "",
                            "description": "The image description",
                            "title": "Image Description",
                            "type": "string"
                        },
                        "image_delete_hash": {
                            "description": "The delete hash for your uploaded image",
                            "title": "Image Delete Hash",
                            "type": "string"
                        },
                        "image_url": {
                            "default": null,
                            "description": "The URL to your uploaded image",
                            "title": "Image Url",
                            "type": "string"
                        }
                    },
                    "required": [
                        "image_delete_hash"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": {
                    "description": "ImgurImageUploaderPiece secrets model",
                    "properties": {
                        "IMGUR_CLIENT_ID": {
                            "description": "The Imgur app client ID",
                            "title": "Imgur Client Id",
                            "type": "string"
                        }
                    },
                    "required": [
                        "IMGUR_CLIENT_ID"
                    ],
                    "title": "SecretsModel",
                    "type": "object"
                },
                "source_url": "https://github.com/Tauffer-Consulting/social_media_domino_pieces/tree/main/pieces/ImgurImageUploaderPiece"
            },
            "EmailSenderPiece": {
                "name": "EmailSenderPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": null
                },
                "tags": [],
                "style": {
                    "node_label": "Email sender Piece",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#ebebeb"
                    },
                    "useIcon": true,
                    "icon_class_name": "fa-solid:envelope",
                    "iconStyle": {
                        "cursor": "pointer"
                    },
                    "use_icon": true
                },
                "description": "Email sender",
                "container_resources": {
                    "use_gpu": false,
                    "requests": {
                        "cpu": "100m",
                        "memory": "100Mi"
                    },
                    "limits": {
                        "cpu": "500m",
                        "memory": "200Mi"
                    }
                },
                "input_schema": {
                    "$defs": {
                        "InnerArgModel": {
                            "description": "Inner argument model to use in the body and subject texts",
                            "properties": {
                                "arg_name": {
                                    "title": "Arg Name",
                                    "type": "string"
                                },
                                "arg_value": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "number"
                                        },
                                        {
                                            "type": "boolean"
                                        }
                                    ],
                                    "title": "Arg Value"
                                }
                            },
                            "required": [
                                "arg_name",
                                "arg_value"
                            ],
                            "title": "InnerArgModel",
                            "type": "object"
                        },
                        "ProviderType": {
                            "enum": [
                                "gmail",
                                "outlook",
                                "office365",
                                "yahoo"
                            ],
                            "title": "ProviderType",
                            "type": "string"
                        }
                    },
                    "description": "Input data for EmailSenderPiece",
                    "properties": {
                        "email_provider": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/ProviderType"
                                }
                            ],
                            "default": "gmail",
                            "description": "The email provider to use"
                        },
                        "email_receivers": {
                            "description": "The receivers of the email, as comma-separated values",
                            "title": "Email Receivers",
                            "type": "string"
                        },
                        "email_subject": {
                            "description": "The subject of the email.",
                            "title": "Email Subject",
                            "type": "string"
                        },
                        "subject_args": {
                            "anyOf": [
                                {
                                    "items": {
                                        "$ref": "#/$defs/InnerArgModel"
                                    },
                                    "type": "array"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "default": null,
                            "description": "List of arguments to insert into the subject of the email",
                            "title": "Subject Args"
                        },
                        "email_body": {
                            "description": "The body of the email.",
                            "title": "Email Body",
                            "type": "string"
                        },
                        "body_args": {
                            "anyOf": [
                                {
                                    "items": {
                                        "$ref": "#/$defs/InnerArgModel"
                                    },
                                    "type": "array"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "default": null,
                            "description": "List of arguments to insert into the body of the email",
                            "title": "Body Args"
                        },
                        "attachment_path": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "default": null,
                            "description": "Path to the attachment file",
                            "title": "Attachment Path"
                        }
                    },
                    "required": [
                        "email_receivers",
                        "email_subject",
                        "email_body"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "description": "Output data for EmailSenderPiece",
                    "properties": {
                        "message": {
                            "default": "",
                            "description": "Output message to log.",
                            "title": "Message",
                            "type": "string"
                        },
                        "success": {
                            "description": "The result of the email sending task.",
                            "title": "Success",
                            "type": "boolean"
                        },
                        "error": {
                            "default": "",
                            "description": "The error message, if any.",
                            "title": "Error",
                            "type": "string"
                        }
                    },
                    "required": [
                        "success"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": {
                    "description": "Secrets data for EmailSenderPiece",
                    "properties": {
                        "EMAIL_SENDER_ACCOUNT": {
                            "description": "The email sender account.",
                            "title": "Email Sender Account",
                            "type": "string"
                        },
                        "EMAIL_SENDER_PASSWORD": {
                            "description": "The email sender password",
                            "title": "Email Sender Password",
                            "type": "string"
                        }
                    },
                    "required": [
                        "EMAIL_SENDER_ACCOUNT",
                        "EMAIL_SENDER_PASSWORD"
                    ],
                    "title": "SecretsModel",
                    "type": "object"
                },
                "source_url": "https://github.com/Tauffer-Consulting/social_media_domino_pieces/tree/main/pieces/EmailSenderPiece"
            },
            "YoutubeDownloadPiece": {
                "name": "YoutubeDownloadPiece",
                "dependency": {
                    "dockerfile": "Dockerfile_youtube",
                    "requirements_file": null
                },
                "tags": [],
                "style": {
                    "node_label": "Youtube Download Piece",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#ebebeb"
                    },
                    "useIcon": true,
                    "icon_class_name": "fa-solid:download",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "Downloads content from youtube videos as audio or video files.",
                "container_resources": {
                    "requests": {
                        "cpu": "100m",
                        "memory": "128Mi"
                    },
                    "limits": {
                        "cpu": "500m",
                        "memory": "512Mi"
                    }
                },
                "input_schema": {
                    "$defs": {
                        "OutputTypeType": {
                            "enum": [
                                "audio",
                                "video"
                            ],
                            "title": "OutputTypeType",
                            "type": "string"
                        }
                    },
                    "description": "Input data for YoutubeDownloadPiece",
                    "properties": {
                        "url": {
                            "description": "The url of the video to be downloaded.",
                            "title": "Url",
                            "type": "string"
                        },
                        "output_type": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/OutputTypeType"
                                }
                            ],
                            "default": "audio",
                            "description": "The type of output file to be downloaded."
                        }
                    },
                    "required": [
                        "url"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "description": "Output data for YoutubeDownloadPiece",
                    "properties": {
                        "message": {
                            "default": "",
                            "description": "Output message to log",
                            "title": "Message",
                            "type": "string"
                        },
                        "file_path": {
                            "description": "The path to the downloaded file",
                            "title": "File Path",
                            "type": "string"
                        }
                    },
                    "required": [
                        "file_path"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/social_media_domino_pieces/tree/main/pieces/YoutubeDownloadPiece"
            },
            "ImgurDeleteImagePiece": {
                "name": "ImgurDeleteImagePiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements.txt"
                },
                "tags": [],
                "style": {
                    "node_label": "Imgur Image Delete Piece",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#ebebeb"
                    },
                    "useIcon": true,
                    "icon_class_name": "uil:image-slash",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "This Piece deletes an image from Imgur.",
                "input_schema": {
                    "description": "ImgurDeleteImagePiece input model",
                    "properties": {
                        "image_delete_hash": {
                            "description": "The delete hash of the image you want to delete",
                            "title": "Image Delete Hash",
                            "type": "string"
                        }
                    },
                    "required": [
                        "image_delete_hash"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "description": "ImgurDeleteImagePiece output model",
                    "properties": {
                        "deletion_status": {
                            "default": null,
                            "description": "The status of the deletion",
                            "title": "Deletion Status",
                            "type": "integer"
                        }
                    },
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": {
                    "description": "ImgurDeleteImagePiece secrets model",
                    "properties": {
                        "IMGUR_ACCESS_TOKEN": {
                            "description": "The user access token for the Imgur app",
                            "title": "Imgur Access Token",
                            "type": "string"
                        }
                    },
                    "required": [
                        "IMGUR_ACCESS_TOKEN"
                    ],
                    "title": "SecretsModel",
                    "type": "object"
                },
                "source_url": "https://github.com/Tauffer-Consulting/social_media_domino_pieces/tree/main/pieces/ImgurDeleteImagePiece"
            },
            "InstagramPostImagePiece": {
                "name": "InstagramPostImagePiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": null
                },
                "tags": [
                    "Instagram"
                ],
                "style": {
                    "node_label": "Instagram Post Image Piece",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#b3cde8"
                    },
                    "useIcon": true,
                    "icon_class_name": "fa-brands:instagram",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "Publish an image to an Instagram account",
                "input_schema": {
                    "description": "InstagramPostImagePiece input model",
                    "properties": {
                        "image_url": {
                            "description": "public URL of the image",
                            "title": "Image Url",
                            "type": "string"
                        },
                        "caption": {
                            "default": "",
                            "description": "post caption",
                            "title": "Caption",
                            "type": "string"
                        },
                        "hashtags": {
                            "default": [],
                            "description": "Optional hashtags to attach to caption footer",
                            "items": {
                                "type": "string"
                            },
                            "title": "Hashtags",
                            "type": "array"
                        },
                        "facebook_page_name": {
                            "description": "Facebook page connected to the Instagram account",
                            "title": "Facebook Page Name",
                            "type": "string"
                        }
                    },
                    "required": [
                        "image_url",
                        "facebook_page_name"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "description": "InstagramPostImagePiece output model",
                    "properties": {
                        "message": {
                            "default": "",
                            "description": "output message to log",
                            "title": "Message",
                            "type": "string"
                        },
                        "post_id": {
                            "description": "post ID",
                            "title": "Post Id",
                            "type": "string"
                        },
                        "post_link": {
                            "description": "post link",
                            "title": "Post Link",
                            "type": "string"
                        }
                    },
                    "required": [
                        "post_id",
                        "post_link"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": {
                    "description": "InstagramPostImagePiece secrets model",
                    "properties": {
                        "INSTAGRAM_APP_ID": {
                            "description": "ID from a Facebook App",
                            "title": "Instagram App Id",
                            "type": "string"
                        },
                        "INSTAGRAM_APP_SECRET": {
                            "description": "secret from a Facebook App",
                            "title": "Instagram App Secret",
                            "type": "string"
                        },
                        "INSTAGRAM_ACCESS_TOKEN": {
                            "description": "access_token getted from a Facebook App",
                            "title": "Instagram Access Token",
                            "type": "string"
                        }
                    },
                    "required": [
                        "INSTAGRAM_APP_ID",
                        "INSTAGRAM_APP_SECRET",
                        "INSTAGRAM_ACCESS_TOKEN"
                    ],
                    "title": "SecretsModel",
                    "type": "object"
                },
                "source_url": "https://github.com/Tauffer-Consulting/social_media_domino_pieces/tree/main/pieces/InstagramPostImagePiece"
            },
            "YoutubeListVideosPiece": {
                "name": "YoutubeListVideosPiece",
                "dependency": {
                    "dockerfile": "Dockerfile_youtube",
                    "requirements_file": null
                },
                "tags": [],
                "style": {
                    "node_label": "Youtube list videos",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#ebebeb"
                    },
                    "useIcon": true,
                    "icon_class_name": "fa-brands:youtube",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "List videos from youtube channel.",
                "container_resources": {
                    "requests": {
                        "cpu": "100m",
                        "memory": "128Mi"
                    },
                    "limits": {
                        "cpu": "500m",
                        "memory": "512Mi"
                    }
                },
                "input_schema": {
                    "$defs": {
                        "OrderBy": {
                            "description": "The order in which the videos are returned.",
                            "enum": [
                                "date",
                                "rating",
                                "relevance",
                                "title",
                                "viewCount"
                            ],
                            "title": "OrderBy",
                            "type": "string"
                        },
                        "VideoDuration": {
                            "description": "The duration of the video.",
                            "enum": [
                                "any",
                                "long",
                                "medium",
                                "short"
                            ],
                            "title": "VideoDuration",
                            "type": "string"
                        }
                    },
                    "description": "Input data for YoutubeListVideosPiece",
                    "properties": {
                        "channel_username": {
                            "default": null,
                            "description": "The username of the Youtube channel.",
                            "title": "Channel Username",
                            "type": "string"
                        },
                        "max_videos": {
                            "default": 10,
                            "description": "The maximum number of videos to be returned",
                            "exclusiveMinimum": 0,
                            "title": "Max Videos",
                            "type": "integer"
                        },
                        "published_at_or_after": {
                            "anyOf": [
                                {
                                    "format": "date",
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "default": null,
                            "description": "Filter videos created at or after the specified date",
                            "title": "Published At Or After"
                        },
                        "published_at_or_before": {
                            "anyOf": [
                                {
                                    "format": "date",
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "default": null,
                            "description": "Filter videos created before or at the specified date",
                            "title": "Published At Or Before"
                        },
                        "order_by": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/OrderBy"
                                }
                            ],
                            "default": "date",
                            "description": "The order in which the videos are returned",
                            "title": "Order By"
                        },
                        "video_duration": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/VideoDuration"
                                }
                            ],
                            "default": "any",
                            "description": "The duration of the video",
                            "title": "Video Duration"
                        },
                        "return_only_urls": {
                            "default": false,
                            "description": "If True, only the urls of the videos will be returned",
                            "title": "Return only urls",
                            "type": "boolean"
                        }
                    },
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "description": "Output data for YoutubeListVideosPiece",
                    "properties": {
                        "message": {
                            "default": "",
                            "description": "Output message to log",
                            "title": "Message",
                            "type": "string"
                        },
                        "videos_list": {
                            "description": "A list containing information about videos.",
                            "items": {},
                            "title": "Videos List",
                            "type": "array"
                        }
                    },
                    "required": [
                        "videos_list"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": {
                    "description": "Secrets data for YoutubeListVideosPiece",
                    "properties": {
                        "YOUTUBE_API_KEY": {
                            "description": "The Youtube Data API Key.",
                            "title": "Youtube Api Key",
                            "type": "string"
                        }
                    },
                    "required": [
                        "YOUTUBE_API_KEY"
                    ],
                    "title": "SecretsModel",
                    "type": "object"
                },
                "source_url": "https://github.com/Tauffer-Consulting/social_media_domino_pieces/tree/main/pieces/YoutubeListVideosPiece"
            }
        }
    },
    "data_apis_domino_pieces": {
        "version": "0.3.0",
        "url": "https://github.com/Tauffer-Consulting/data_apis_domino_pieces",
        "pieces": {
            "NewsApiHeadlinesPiece": {
                "name": "NewsApiHeadlinesPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements.txt"
                },
                "tags": [],
                "style": {
                    "node_label": "NewsAPI Headlines",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#ebebeb"
                    },
                    "useIcon": true,
                    "icon_class_name": "fluent:news-16-regular",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "This Piece uses the News API to retrieve the top headlines from a given source or country.\nReferences:\n- https://newsapi.org/\n- https://newsapi.org/docs/endpoints/top-headlines",
                "container_resources": {
                    "requests": {
                        "cpu": "100m",
                        "memory": "128Mi"
                    },
                    "limits": {
                        "cpu": "500m",
                        "memory": "512Mi"
                    }
                },
                "input_schema": {
                    "$defs": {
                        "CategoryType": {
                            "enum": [
                                "business",
                                "entertainment",
                                "general",
                                "health",
                                "science",
                                "sports",
                                "technology"
                            ],
                            "title": "CategoryType",
                            "type": "string"
                        },
                        "CountryType": {
                            "enum": [
                                "all",
                                "ae",
                                "ar",
                                "at",
                                "au",
                                "be",
                                "bg",
                                "br",
                                "ca",
                                "ch",
                                "cn",
                                "co",
                                "cu",
                                "cz",
                                "de",
                                "eg",
                                "fr",
                                "gb",
                                "gr",
                                "hk",
                                "hu",
                                "id",
                                "ie",
                                "il",
                                "in",
                                "it",
                                "jp",
                                "kr",
                                "lt",
                                "lv",
                                "ma",
                                "mx",
                                "my",
                                "ng",
                                "nl",
                                "no",
                                "nz",
                                "ph",
                                "pl",
                                "pt",
                                "ro",
                                "rs",
                                "ru",
                                "sa",
                                "se",
                                "sg",
                                "si",
                                "sk",
                                "th",
                                "tr",
                                "tw",
                                "ua",
                                "us",
                                "ve",
                                "za"
                            ],
                            "title": "CountryType",
                            "type": "string"
                        },
                        "LanguageType": {
                            "enum": [
                                "ar",
                                "de",
                                "en",
                                "es",
                                "fr",
                                "he",
                                "it",
                                "nl",
                                "no",
                                "pt",
                                "ru",
                                "sv",
                                "ud",
                                "zh"
                            ],
                            "title": "LanguageType",
                            "type": "string"
                        }
                    },
                    "properties": {
                        "query": {
                            "description": "Query to search for.",
                            "title": "Query",
                            "type": "string"
                        },
                        "category": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/CategoryType"
                                }
                            ],
                            "default": "general",
                            "description": "Category to filter by. Options are: `business`, `entertainment`, `general`, `health`, `science`, `sports`, `technology`."
                        },
                        "country": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/CountryType"
                                }
                            ],
                            "default": "all",
                            "description": "Country to filter by. Options are: `all`, `ae`, `ar`, `at`, `au`, `be`, `bg`, `br`, `ca`, `ch`, `cn`, `co`, `cu`, `cz`, `de`, `eg`, `fr`, `gb`, `gr`, `hk`, `hu`, `id`, `ie`, `il`, `in`, `it`, `jp`, `kr`, `lt`, `lv`, `ma`, `mx`, `my`, `ng`, `nl`, `no`, `nz`, `ph`, `pl`, `pt`, `ro`, `rs`, `ru`, `sa`, `se`, `sg`, `si`, `sk`, `th`, `tr`, `tw`, `ua`, `us`, `ve`, `za`."
                        },
                        "language": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/LanguageType"
                                }
                            ],
                            "default": "en",
                            "description": "Language to filter by. Options are: `ar`, `de`, `en`, `es`, `fr`, `he`, `it`, `nl`, `no`, `pt`, `ru`, `sv`, `ud`, `zh`."
                        },
                        "number_of_results": {
                            "default": 20,
                            "description": "Number of results to return",
                            "maximum": 100,
                            "minimum": 1,
                            "title": "Number Of Results",
                            "type": "integer"
                        }
                    },
                    "required": [
                        "query"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "$defs": {
                        "ArticleModel": {
                            "properties": {
                                "source": {
                                    "description": "Source of article.",
                                    "title": "Source",
                                    "type": "string"
                                },
                                "title": {
                                    "description": "Title of article.",
                                    "title": "Title",
                                    "type": "string"
                                },
                                "author": {
                                    "description": "Author of article.",
                                    "title": "Author",
                                    "type": "string"
                                },
                                "description": {
                                    "description": "Description of article.",
                                    "title": "Description",
                                    "type": "string"
                                },
                                "publishedAt": {
                                    "description": "Date article was published, in ISO format.",
                                    "title": "Publishedat",
                                    "type": "string"
                                },
                                "url": {
                                    "description": "URL of article.",
                                    "title": "Url",
                                    "type": "string"
                                },
                                "url_to_image": {
                                    "default": "",
                                    "description": "Image associated with article.",
                                    "title": "Url To Image",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "source",
                                "title",
                                "author",
                                "description",
                                "publishedAt",
                                "url"
                            ],
                            "title": "ArticleModel",
                            "type": "object"
                        }
                    },
                    "properties": {
                        "message": {
                            "description": "Output message to log.",
                            "title": "Message",
                            "type": "string"
                        },
                        "articles": {
                            "description": "List of articles.",
                            "items": {
                                "$ref": "#/$defs/ArticleModel"
                            },
                            "title": "Articles",
                            "type": "array"
                        }
                    },
                    "required": [
                        "message",
                        "articles"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": {
                    "properties": {
                        "NEWSAPI_API_KEY": {
                            "description": "News API API Key.",
                            "title": "Newsapi Api Key",
                            "type": "string"
                        }
                    },
                    "required": [
                        "NEWSAPI_API_KEY"
                    ],
                    "title": "SecretsModel",
                    "type": "object"
                },
                "source_url": "https://github.com/Tauffer-Consulting/data_apis_domino_pieces/tree/main/pieces/NewsApiHeadlinesPiece"
            },
            "DogRandomFactsPiece": {
                "name": "DogRandomFactsPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements.txt"
                },
                "tags": [],
                "style": {
                    "node_label": "Dog Random Facts",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#ebebeb"
                    },
                    "useIcon": true,
                    "icon_class_name": "bxs:dog",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "This Piece uses the Dog API to get a random dog fact.\n- https://dog-api.kinduff.com/api/facts",
                "container_resources": {
                    "requests": {
                        "cpu": "100m",
                        "memory": "128Mi"
                    },
                    "limits": {
                        "cpu": "500m",
                        "memory": "512Mi"
                    }
                },
                "input_schema": {
                    "properties": {},
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "properties": {
                        "dog_fact": {
                            "default": "",
                            "description": "A random dog fact.",
                            "title": "Dog Fact",
                            "type": "string"
                        }
                    },
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/data_apis_domino_pieces/tree/main/pieces/DogRandomFactsPiece"
            },
            "DogRandomPicturePiece": {
                "name": "DogRandomPicturePiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements.txt"
                },
                "tags": [],
                "style": {
                    "node_label": "Dog Random Picture",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#ebebeb"
                    },
                    "useIcon": true,
                    "icon_class_name": "bxs:dog",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "This Piece uses the Dog API to get a random dog picture.\n- https://dog.ceo/dog-api/",
                "container_resources": {
                    "requests": {
                        "cpu": "100m",
                        "memory": "128Mi"
                    },
                    "limits": {
                        "cpu": "500m",
                        "memory": "512Mi"
                    }
                },
                "input_schema": {
                    "properties": {
                        "return_string": {
                            "default": true,
                            "description": "Return the image as a base64 encoded string.",
                            "title": "Return String",
                            "type": "boolean"
                        },
                        "return_file": {
                            "default": false,
                            "description": "Return the image file.",
                            "title": "Return File",
                            "type": "boolean"
                        },
                        "return_url": {
                            "default": false,
                            "description": "Return the image url.",
                            "title": "Return Url",
                            "type": "boolean"
                        }
                    },
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "properties": {
                        "image_base64_string": {
                            "default": null,
                            "description": "Image as base64 encoded string.",
                            "title": "Image Base64 String",
                            "type": "string"
                        },
                        "image_file_path": {
                            "default": null,
                            "description": "Path to the image file.",
                            "title": "Image File Path",
                            "type": "string"
                        },
                        "image_url": {
                            "default": null,
                            "description": "URL to the image.",
                            "title": "Image Url",
                            "type": "string"
                        }
                    },
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/data_apis_domino_pieces/tree/main/pieces/DogRandomPicturePiece"
            },
            "AlphaVantageDailyPiece": {
                "name": "AlphaVantageDailyPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements.txt"
                },
                "tags": [],
                "style": {
                    "node_label": "AlphaVantage Daily",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#ebebeb"
                    },
                    "useIcon": true,
                    "icon_class_name": "ant-design:stock-outlined",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "This Piece uses the AlphaVantage API to get daily stock data.\n- https://www.alphavantage.co/",
                "container_resources": {
                    "requests": {
                        "cpu": "100m",
                        "memory": "128Mi"
                    },
                    "limits": {
                        "cpu": "500m",
                        "memory": "512Mi"
                    }
                },
                "input_schema": {
                    "$defs": {
                        "OutputSizeTypes": {
                            "enum": [
                                "compact",
                                "full"
                            ],
                            "title": "OutputSizeTypes",
                            "type": "string"
                        }
                    },
                    "properties": {
                        "symbol": {
                            "default": "AAPL",
                            "description": "The stock symbol.",
                            "title": "Symbol",
                            "type": "string"
                        },
                        "output_size": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/OutputSizeTypes"
                                }
                            ],
                            "default": "compact",
                            "description": "The size of the output data. Options are `compact` (100 data points) and full (full-length data). Default is `compact`."
                        },
                        "max_data_points": {
                            "default": -1,
                            "description": "The maximum number of data points to return. Default is -1, which returns all data points.",
                            "title": "Max Data Points",
                            "type": "integer"
                        }
                    },
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "properties": {
                        "data_file_path": {
                            "default": "",
                            "description": "Path to the data file.",
                            "title": "Data File Path",
                            "type": "string"
                        }
                    },
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": {
                    "properties": {
                        "ALPHA_VANTAGE_API_KEY": {
                            "description": "API key for Alpha Vantage data API.",
                            "title": "Alpha Vantage Api Key",
                            "type": "string"
                        }
                    },
                    "required": [
                        "ALPHA_VANTAGE_API_KEY"
                    ],
                    "title": "SecretsModel",
                    "type": "object"
                },
                "source_url": "https://github.com/Tauffer-Consulting/data_apis_domino_pieces/tree/main/pieces/AlphaVantageDailyPiece"
            },
            "NewsApiArticlesPiece": {
                "name": "NewsApiArticlesPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements.txt"
                },
                "tags": [],
                "style": {
                    "node_label": "NewsAPI Articles",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#ebebeb"
                    },
                    "useIcon": true,
                    "icon_class_name": "fluent:news-16-regular",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "This Piece uses the News API to retrieve full articles.\nReferences:\n- https://newsapi.org/\n- https://newsapi.org/docs/endpoints/everything",
                "container_resources": {
                    "requests": {
                        "cpu": "100m",
                        "memory": "128Mi"
                    },
                    "limits": {
                        "cpu": "500m",
                        "memory": "512Mi"
                    }
                },
                "input_schema": {
                    "$defs": {
                        "LanguageType": {
                            "enum": [
                                "ar",
                                "de",
                                "en",
                                "es",
                                "fr",
                                "he",
                                "it",
                                "nl",
                                "no",
                                "pt",
                                "ru",
                                "sv",
                                "ud",
                                "zh"
                            ],
                            "title": "LanguageType",
                            "type": "string"
                        },
                        "SortByType": {
                            "enum": [
                                "relevancy",
                                "popularity",
                                "publishedAt"
                            ],
                            "title": "SortByType",
                            "type": "string"
                        }
                    },
                    "properties": {
                        "query": {
                            "description": "Query to search for.",
                            "title": "Query",
                            "type": "string"
                        },
                        "from_date": {
                            "default": "2023-11-01",
                            "description": "From date.",
                            "format": "date",
                            "title": "From Date",
                            "type": "string"
                        },
                        "to_date": {
                            "default": "2023-11-06",
                            "description": "To date.",
                            "format": "date",
                            "title": "To Date",
                            "type": "string"
                        },
                        "sort_by": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/SortByType"
                                }
                            ],
                            "default": "relevancy",
                            "description": "Sort by. Options are: `relevancy`, `popularity`, `publishedAt`."
                        },
                        "language": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/LanguageType"
                                }
                            ],
                            "default": "en",
                            "description": "Language to filter by. Options are: `ar`, `de`, `en`, `es`, `fr`, `he`, `it`, `nl`, `no`, `pt`, `ru`, `sv`, `ud`, `zh`."
                        },
                        "number_of_results": {
                            "default": 20,
                            "description": "Number of results to return.",
                            "maximum": 100,
                            "minimum": 1,
                            "title": "Number Of Results",
                            "type": "integer"
                        }
                    },
                    "required": [
                        "query"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "$defs": {
                        "ArticleModel": {
                            "properties": {
                                "source": {
                                    "description": "Source of article.",
                                    "title": "Source",
                                    "type": "string"
                                },
                                "title": {
                                    "description": "Title of article.",
                                    "title": "Title",
                                    "type": "string"
                                },
                                "author": {
                                    "description": "Author of article.",
                                    "title": "Author",
                                    "type": "string"
                                },
                                "description": {
                                    "description": "Description of article.",
                                    "title": "Description",
                                    "type": "string"
                                },
                                "publishedAt": {
                                    "description": "Date article was published, in ISO format.",
                                    "title": "Publishedat",
                                    "type": "string"
                                },
                                "url": {
                                    "description": "URL of article.",
                                    "title": "Url",
                                    "type": "string"
                                },
                                "url_to_image": {
                                    "default": "",
                                    "description": "Image associated with article.",
                                    "title": "Url To Image",
                                    "type": "string"
                                },
                                "content": {
                                    "description": "Content of article.",
                                    "title": "Content",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "source",
                                "title",
                                "author",
                                "description",
                                "publishedAt",
                                "url",
                                "content"
                            ],
                            "title": "ArticleModel",
                            "type": "object"
                        }
                    },
                    "properties": {
                        "message": {
                            "description": "Output message to log",
                            "title": "Message",
                            "type": "string"
                        },
                        "articles": {
                            "description": "List of articles",
                            "items": {
                                "$ref": "#/$defs/ArticleModel"
                            },
                            "title": "Articles",
                            "type": "array"
                        }
                    },
                    "required": [
                        "message",
                        "articles"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": {
                    "properties": {
                        "NEWSAPI_API_KEY": {
                            "description": "News API API Key",
                            "title": "Newsapi Api Key",
                            "type": "string"
                        }
                    },
                    "required": [
                        "NEWSAPI_API_KEY"
                    ],
                    "title": "SecretsModel",
                    "type": "object"
                },
                "source_url": "https://github.com/Tauffer-Consulting/data_apis_domino_pieces/tree/main/pieces/NewsApiArticlesPiece"
            },
            "CovidApiContriesPiece": {
                "name": "CovidApiContriesPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements.txt"
                },
                "tags": [],
                "style": {
                    "node_label": "Covid-19 Countries",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#ebebeb"
                    },
                    "useIcon": true,
                    "icon_class_name": "ion:earth-sharp",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "This piece get covid 19 data for all countries",
                "container_resources": {
                    "requests": {
                        "cpu": "100m",
                        "memory": "128Mi"
                    },
                    "limits": {
                        "cpu": "500m",
                        "memory": "512Mi"
                    }
                },
                "input_schema": {
                    "properties": {
                        "countries": {
                            "anyOf": [
                                {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "default": null,
                            "title": "Countries"
                        }
                    },
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "$defs": {
                        "OutputInnerModel": {
                            "properties": {
                                "Country": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Country",
                                    "type": "array"
                                },
                                "Cases per One Million": {
                                    "items": {
                                        "type": "number"
                                    },
                                    "title": "Cases Per One Million",
                                    "type": "array"
                                }
                            },
                            "required": [
                                "Country",
                                "Cases per One Million"
                            ],
                            "title": "OutputInnerModel",
                            "type": "object"
                        }
                    },
                    "properties": {
                        "data": {
                            "$ref": "#/$defs/OutputInnerModel"
                        }
                    },
                    "required": [
                        "data"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/data_apis_domino_pieces/tree/main/pieces/CovidApiContriesPiece"
            },
            "NasaEarthImagePiece": {
                "name": "NasaEarthImagePiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements.txt"
                },
                "tags": [],
                "style": {
                    "node_label": "NASA Earth Image",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#ebebeb"
                    },
                    "useIcon": true,
                    "icon_class_name": "ion:earth-sharp",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "This Piece uses the NASA EPIC API to get satellite images of the Earth.\nReferences: \n- https://epic.gsfc.nasa.gov/about/api \n- https://api.nasa.gov/",
                "container_resources": {
                    "requests": {
                        "cpu": "100m",
                        "memory": "128Mi"
                    },
                    "limits": {
                        "cpu": "500m",
                        "memory": "512Mi"
                    }
                },
                "input_schema": {
                    "$defs": {
                        "LocationTypes": {
                            "enum": [
                                "random",
                                "America",
                                "Atlantic Ocean",
                                "Africa",
                                "Asia",
                                "Pacific Ocean"
                            ],
                            "title": "LocationTypes",
                            "type": "string"
                        }
                    },
                    "properties": {
                        "location": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/LocationTypes"
                                }
                            ],
                            "default": "random",
                            "description": "Retrieve image centered approximately on this location."
                        }
                    },
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "properties": {
                        "image_url": {
                            "default": null,
                            "description": "URL of the image.",
                            "title": "Image Url",
                            "type": "string"
                        },
                        "image_base64_string": {
                            "default": null,
                            "description": "Image as base64 encoded string.",
                            "title": "Image Base64 String",
                            "type": "string"
                        },
                        "image_file_path": {
                            "default": null,
                            "description": "Path to the image file.",
                            "title": "Image File Path",
                            "type": "string"
                        }
                    },
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": {
                    "properties": {
                        "NASA_API_KEY": {
                            "default": "DEMO_KEY",
                            "description": "API key for NASA Earth Image API.",
                            "title": "Nasa Api Key",
                            "type": "string"
                        }
                    },
                    "title": "SecretsModel",
                    "type": "object"
                },
                "source_url": "https://github.com/Tauffer-Consulting/data_apis_domino_pieces/tree/main/pieces/NasaEarthImagePiece"
            },
            "TicketmasterUpcommingEventsPiece": {
                "name": "TicketmasterUpcommingEventsPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements.txt"
                },
                "tags": [],
                "style": {
                    "node_label": "Ticketmaster Upcomming Events",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#ebebeb"
                    },
                    "useIcon": true,
                    "icon_class_name": "uil:ticket",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "This Piece uses the Ticketmaster API to get upcomming events based on a search options.\n -https://developer.ticketmaster.com/products-and-docs/apis/discovery-api/v2/",
                "container_resources": {
                    "requests": {
                        "cpu": "100m",
                        "memory": "128Mi"
                    },
                    "limits": {
                        "cpu": "500m",
                        "memory": "512Mi"
                    }
                },
                "input_schema": {
                    "properties": {
                        "max_number_of_events": {
                            "default": 10,
                            "description": "Maximum number of events to return.",
                            "maximum": 100,
                            "minimum": 1,
                            "title": "Max Number Of Events",
                            "type": "integer"
                        },
                        "keyword": {
                            "default": null,
                            "description": "Keyword to search for.",
                            "title": "Keyword",
                            "type": "string"
                        },
                        "end_date": {
                            "default": null,
                            "description": "End date for the search. Must be a future date.",
                            "format": "date",
                            "title": "End Date",
                            "type": "string"
                        },
                        "city": {
                            "default": null,
                            "description": "City to search for.",
                            "title": "City",
                            "type": "string"
                        },
                        "country_code": {
                            "default": null,
                            "description": "Country code to search for. Must be a valid ISO 3166-1 alpha-2 code.",
                            "maxLength": 2,
                            "minLength": 2,
                            "title": "Country Code",
                            "type": "string"
                        }
                    },
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "$defs": {
                        "EventObjectType": {
                            "properties": {
                                "name": {
                                    "description": "Name of the event type.",
                                    "title": "Name",
                                    "type": "string"
                                },
                                "event_date": {
                                    "description": "Date of the event.",
                                    "format": "date",
                                    "title": "Event Date",
                                    "type": "string"
                                },
                                "event_location": {
                                    "description": "Location of the event.",
                                    "title": "Event Location",
                                    "type": "string"
                                },
                                "classification": {
                                    "default": null,
                                    "description": "Classification of the event.",
                                    "title": "Classification",
                                    "type": "string"
                                },
                                "url": {
                                    "default": null,
                                    "description": "URL of the event type.",
                                    "title": "Url",
                                    "type": "string"
                                },
                                "image_url": {
                                    "default": null,
                                    "description": "Image URL of the event type.",
                                    "title": "Image Url",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "name",
                                "event_date",
                                "event_location"
                            ],
                            "title": "EventObjectType",
                            "type": "object"
                        }
                    },
                    "properties": {
                        "events": {
                            "description": "List of events.",
                            "items": {
                                "$ref": "#/$defs/EventObjectType"
                            },
                            "title": "Events",
                            "type": "array"
                        },
                        "results_formatted": {
                            "description": "Text with formatted results.",
                            "title": "Results Formatted",
                            "type": "string"
                        }
                    },
                    "required": [
                        "events",
                        "results_formatted"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": {
                    "properties": {
                        "TICKETMASTER_API_KEY": {
                            "description": "API key for the Ticketmaster API.",
                            "title": "Ticketmaster Api Key",
                            "type": "string"
                        }
                    },
                    "required": [
                        "TICKETMASTER_API_KEY"
                    ],
                    "title": "SecretsModel",
                    "type": "object"
                },
                "source_url": "https://github.com/Tauffer-Consulting/data_apis_domino_pieces/tree/main/pieces/TicketmasterUpcommingEventsPiece"
            }
        }
    },
    "ml-domino-pieces": {
        "version": "0.2.0",
        "url": "https://github.com/Tauffer-Consulting/ml_domino_pieces",
        "pieces": {
            "TrainRandomForestClassifierPiece": {
                "name": "TrainRandomForestClassifierPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements_0.txt"
                },
                "tags": [
                    "modeling",
                    "machine_learning"
                ],
                "style": {
                    "node_label": "Train Random Forest Classifier Piece",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#38b2be"
                    },
                    "useIcon": true,
                    "icon_class_name": "carbon:machine-learning-model",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "Train a Random Forest Classifier model over the input data.",
                "input_schema": {
                    "$defs": {
                        "Criterion": {
                            "enum": [
                                "gini",
                                "entropy",
                                "log_loss"
                            ],
                            "title": "Criterion",
                            "type": "string"
                        }
                    },
                    "properties": {
                        "train_data_path": {
                            "description": "The path to the train data to train the data.",
                            "from_upstream": "always",
                            "title": "Train Data Path",
                            "type": "string"
                        },
                        "n_estimators": {
                            "default": 100,
                            "description": "The number of trees in the forest.",
                            "title": "Number of Estimators",
                            "type": "integer"
                        },
                        "criterion": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/Criterion"
                                }
                            ],
                            "default": "gini",
                            "description": "The function to measure the quality of a split.",
                            "title": "Criterion"
                        },
                        "max_depth": {
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "default": null,
                            "description": "The maximum depth of the tree.",
                            "title": "Max Depth"
                        }
                    },
                    "required": [
                        "train_data_path"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "properties": {
                        "random_forest_model_path": {
                            "title": "Random Forest Model Path",
                            "type": "string"
                        }
                    },
                    "required": [
                        "random_forest_model_path"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/ml_domino_pieces/tree/main/pieces/TrainRandomForestClassifierPiece"
            },
            "StandardScalerPiece": {
                "name": "StandardScalerPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements_0.txt"
                },
                "tags": [
                    "preprocessing",
                    "scaler"
                ],
                "style": {
                    "node_label": "Standard Scaler",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#b3cde8"
                    },
                    "useIcon": true,
                    "icon_class_name": "icon-park-outline:split",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "Apply StandardScaler to the data",
                "input_schema": {
                    "properties": {
                        "train_data_path": {
                            "description": "The path to the train data to be scaled.",
                            "from_upstream": "always",
                            "title": "Train Data Path",
                            "type": "string"
                        },
                        "test_data_path": {
                            "description": "The path to the test data to be scaled.",
                            "from_upstream": "always",
                            "title": "Test Data Path",
                            "type": "string"
                        }
                    },
                    "required": [
                        "train_data_path",
                        "test_data_path"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "properties": {
                        "train_data_path": {
                            "title": "Train Data Path",
                            "type": "string"
                        },
                        "test_data_path": {
                            "title": "Test Data Path",
                            "type": "string"
                        }
                    },
                    "required": [
                        "train_data_path",
                        "test_data_path"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/ml_domino_pieces/tree/main/pieces/StandardScalerPiece"
            },
            "TSNEPiece": {
                "name": "TSNEPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements_0.txt"
                },
                "tags": [
                    "preprocessing",
                    "dimensionality",
                    "reduction"
                ],
                "style": {
                    "node_label": "t-SNE Piece",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#38b2be"
                    },
                    "useIcon": true,
                    "icon_class_name": "radix-icons:dimensions",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "Applies t-SNE to the data",
                "input_schema": {
                    "properties": {
                        "data_path": {
                            "description": "The path to data to apply t-SNE.",
                            "from_upstream": "always",
                            "title": "Data Path",
                            "type": "string"
                        },
                        "n_components": {
                            "default": 2,
                            "description": "The number of dimensions t-SNE.",
                            "title": "Number of Dimensions",
                            "type": "integer"
                        },
                        "use_class_column": {
                            "default": false,
                            "description": "Whether to use the target column as class to plot.",
                            "title": "Use Class Column",
                            "type": "boolean"
                        }
                    },
                    "required": [
                        "data_path"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "properties": {
                        "tsne_data_path": {
                            "default": null,
                            "title": "Tsne Data Path",
                            "type": "string"
                        }
                    },
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/ml_domino_pieces/tree/main/pieces/TSNEPiece"
            },
            "PCAInferencePiece": {
                "name": "PCAInferencePiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements_0.txt"
                },
                "tags": [
                    "preprocessing",
                    "dimensionality",
                    "reduction"
                ],
                "style": {
                    "node_label": "PCA Inference Piece",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#38b2be"
                    },
                    "useIcon": true,
                    "icon_class_name": "radix-icons:dimensions",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "Use the trained PCA model to transform the data",
                "input_schema": {
                    "properties": {
                        "model_path": {
                            "description": "The path to the PCA model.",
                            "from_upstream": "always",
                            "title": "Model Path",
                            "type": "string"
                        },
                        "data_path": {
                            "description": "The path to the train data to apply PCA.",
                            "from_upstream": "always",
                            "title": "Data Path",
                            "type": "string"
                        },
                        "use_class_column": {
                            "default": false,
                            "description": "Whether to use the target column as class to plot.",
                            "title": "Use Class Column",
                            "type": "boolean"
                        }
                    },
                    "required": [
                        "model_path",
                        "data_path"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "properties": {
                        "pca_data_path": {
                            "default": null,
                            "title": "Pca Data Path",
                            "type": "string"
                        }
                    },
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/ml_domino_pieces/tree/main/pieces/PCAInferencePiece"
            },
            "TrainTestSplitPiece": {
                "name": "TrainTestSplitPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements_0.txt"
                },
                "tags": [
                    "preprocessing",
                    "datasets"
                ],
                "style": {
                    "node_label": "Split Data",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#b3cde8"
                    },
                    "useIcon": true,
                    "icon_class_name": "icon-park-outline:split",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "Split data into train and test sets",
                "input_schema": {
                    "properties": {
                        "data_path": {
                            "description": "The path to the data to be split.",
                            "from_upstream": "always",
                            "title": "Data Path",
                            "type": "string"
                        },
                        "test_data_size": {
                            "default": 0.2,
                            "description": "The size (%) of the test data.",
                            "title": "Test Data Ratio",
                            "type": "number"
                        },
                        "random_state": {
                            "default": 42,
                            "description": "The random state for the split.",
                            "title": "Random State",
                            "type": "integer"
                        }
                    },
                    "required": [
                        "data_path"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "properties": {
                        "train_data_path": {
                            "title": "Train Data Path",
                            "type": "string"
                        },
                        "test_data_path": {
                            "title": "Test Data Path",
                            "type": "string"
                        }
                    },
                    "required": [
                        "train_data_path",
                        "test_data_path"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/ml_domino_pieces/tree/main/pieces/TrainTestSplitPiece"
            },
            "PCATrainPiece": {
                "name": "PCATrainPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements_0.txt"
                },
                "tags": [
                    "preprocessing",
                    "dimensionality",
                    "reduction"
                ],
                "style": {
                    "node_label": "PCA Train Piece",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#38b2be"
                    },
                    "useIcon": true,
                    "icon_class_name": "radix-icons:dimensions",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "Applies PCA to the input data",
                "input_schema": {
                    "properties": {
                        "data_path": {
                            "description": "The path to the train data to apply PCA.",
                            "from_upstream": "always",
                            "title": "Train Data Path",
                            "type": "string"
                        },
                        "n_components": {
                            "default": 2,
                            "description": "The number of components for PCA.",
                            "title": "Number of Components",
                            "type": "integer"
                        },
                        "use_class_column": {
                            "default": false,
                            "description": "Whether to use the target column as class to plot.",
                            "title": "Use Class Column",
                            "type": "boolean"
                        }
                    },
                    "required": [
                        "data_path"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "properties": {
                        "pca_data_path": {
                            "title": "Pca Data Path",
                            "type": "string"
                        },
                        "pca_model_path": {
                            "title": "Pca Model Path",
                            "type": "string"
                        }
                    },
                    "required": [
                        "pca_data_path",
                        "pca_model_path"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/ml_domino_pieces/tree/main/pieces/PCATrainPiece"
            },
            "UMAPPiece": {
                "name": "UMAPPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements_0.txt"
                },
                "tags": [
                    "preprocessing",
                    "dimensionality",
                    "reduction"
                ],
                "style": {
                    "node_label": "UMAP Piece",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#38b2be"
                    },
                    "useIcon": true,
                    "icon_class_name": "radix-icons:dimensions",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "Applies t-SNE to the data",
                "container_resources": {
                    "requests": {
                        "cpu": 1000,
                        "memory": 1024
                    },
                    "limits": {
                        "cpu": 1000,
                        "memory": 1024
                    }
                },
                "input_schema": {
                    "properties": {
                        "data_path": {
                            "description": "The path to the data to apply UMAP.",
                            "from_upstream": "always",
                            "title": "Data Path",
                            "type": "string"
                        },
                        "n_components": {
                            "default": 2,
                            "description": "The number of dimensions for UMAP.",
                            "title": "Number of Dimensions",
                            "type": "integer"
                        },
                        "use_class_column": {
                            "default": false,
                            "description": "Whether to use the target column as class to plot.",
                            "title": "Use Class Column",
                            "type": "boolean"
                        }
                    },
                    "required": [
                        "data_path"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "properties": {
                        "umap_data_path": {
                            "default": null,
                            "title": "Umap Data Path",
                            "type": "string"
                        }
                    },
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/ml_domino_pieces/tree/main/pieces/UMAPPiece"
            },
            "OpenCVFilterPiece": {
                "name": "OpenCVFilterPiece",
                "dependency": {
                    "dockerfile": "Dockerfile_opencv",
                    "requirements_file": null
                },
                "tags": [
                    "image",
                    "processing",
                    "filter"
                ],
                "style": {
                    "node_label": "OpenCV Filter Piece",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#38b2be"
                    },
                    "useIcon": true,
                    "icon_class_name": "material-symbols:image-outline",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "Piece that uses OpenCV filter on an Image",
                "input_schema": {
                    "$defs": {
                        "FilterNaem": {
                            "enum": [
                                "canny",
                                "binary"
                            ],
                            "title": "FilterNaem",
                            "type": "string"
                        }
                    },
                    "properties": {
                        "image_path": {
                            "description": "The path to the image to apply filter.",
                            "from_upstream": "always",
                            "title": "Image Path",
                            "type": "string"
                        },
                        "filter_name": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/FilterNaem"
                                }
                            ],
                            "default": "canny",
                            "description": "The name of the filter to apply.",
                            "title": "Filter Name"
                        }
                    },
                    "required": [
                        "image_path"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "properties": {
                        "image_path": {
                            "description": "The path to the image with the filter applied.",
                            "title": "Output image Path",
                            "type": "string"
                        }
                    },
                    "required": [
                        "image_path"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/ml_domino_pieces/tree/main/pieces/OpenCVFilterPiece"
            },
            "InferenceModelPiece": {
                "name": "InferenceModelPiece",
                "dependency": {
                    "dockerfile": null,
                    "requirements_file": "requirements_0.txt"
                },
                "tags": [
                    "modeling",
                    "machine_learning"
                ],
                "style": {
                    "node_label": "Inference Model Piece",
                    "node_type": "default",
                    "node_style": {
                        "backgroundColor": "#38b2be"
                    },
                    "useIcon": true,
                    "icon_class_name": "carbon:machine-learning-model",
                    "iconStyle": {
                        "cursor": "pointer"
                    }
                },
                "description": "Load a trained model and use it to make predictions on new data.",
                "input_schema": {
                    "properties": {
                        "data_path": {
                            "description": "Data path to inference on.",
                            "from_upstream": "always",
                            "title": "Data path",
                            "type": "string"
                        },
                        "model_path": {
                            "description": "Path to the model to use for inference.",
                            "from_upstream": "always",
                            "title": "Model path",
                            "type": "string"
                        }
                    },
                    "required": [
                        "data_path",
                        "model_path"
                    ],
                    "title": "InputModel",
                    "type": "object"
                },
                "output_schema": {
                    "properties": {
                        "data_path": {
                            "title": "Data Path",
                            "type": "string"
                        }
                    },
                    "required": [
                        "data_path"
                    ],
                    "title": "OutputModel",
                    "type": "object"
                },
                "secrets_schema": null,
                "source_url": "https://github.com/Tauffer-Consulting/ml_domino_pieces/tree/main/pieces/InferenceModelPiece"
            }
        }
    }
}